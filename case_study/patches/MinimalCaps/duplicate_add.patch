diff --git a/case_study/MinimalCaps/Base.v b/case_study/MinimalCaps/Base.v
index 15fe263..77676e1 100644
--- a/case_study/MinimalCaps/Base.v
+++ b/case_study/MinimalCaps/Base.v
@@ -61,6 +61,7 @@ Inductive Instruction : Set :=
 | sd            (rs1 : Src) (rs2 : Src) (imm : Imm)
 | addi          (rd  : Dst) (rs  : Src) (imm : Imm)
 | add           (rd  : Dst) (rs1 : Src) (rs2 : Src)
+| add'          (rd  : Dst) (rs1 : Src) (rs2 : Src)
 | sub           (rd  : Dst) (rs1 : Src) (rs2 : Src)
 | slt           (rd  : Dst) (rs1 : Src) (rs2 : Src)
 | slti          (rd  : Dst) (rs  : Src) (imm : Imm)
@@ -88,6 +89,7 @@ Inductive InstructionConstructor : Set :=
 | ksd
 | kaddi
 | kadd
+| kadd'
 | ksub
 | kslt
 | kslti
@@ -184,7 +187,7 @@ Section Finite.
 
   #[export,program] Instance InstructionConstructor_finite :
     Finite InstructionConstructor :=
-    {| enum := [kjalr_cap;kcjalr;kcjal;kbne;kcmove;kld;ksd;kcincoffset;kcandperm;kcsetbounds;kcsetboundsimm;kcgettag;kaddi;kadd;ksub;kslt;kslti;ksltu;ksltiu;kcgetperm;kcgetbase;kcgetlen;kcgetaddr;kfail;kret] |}.
+    {| enum := [kjalr_cap;kcjalr;kcjal;kbne;kcmove;kld;ksd;kcincoffset;kcandperm;kcsetbounds;kcsetboundsimm;kcgettag;kaddi;kadd;kadd';ksub;kslt;kslti;ksltu;ksltiu;kcgetperm;kcgetbase;kcgetlen;kcgetaddr;kfail;kret] |}.
 
 End Finite.
 
@@ -249,6 +251,7 @@ Module Export MinCapsBase <: Base.
       | ksd            => ty.tuple [ty.src; ty.src; ty.int]
       | kaddi          => ty.tuple [ty.dst; ty.src; ty.int]
       | kadd           => ty.tuple [ty.dst; ty.src; ty.src]
+      | kadd'          => ty.tuple [ty.dst; ty.src; ty.src]
       | ksub           => ty.tuple [ty.dst; ty.src; ty.src]
       | kslt           => ty.tuple [ty.dst; ty.src; ty.src]
       | kslti          => ty.tuple [ty.dst; ty.src; ty.int]
@@ -293,6 +296,7 @@ Module Export MinCapsBase <: Base.
       | existT ksd            (tt , rs1 , rs2, imm)  => sd            rs1 rs2 imm
       | existT kaddi          (tt , rd , rs , imm)   => addi          rd  rs  imm
       | existT kadd           (tt , rd , rs1 , rs2)  => add           rd  rs1 rs2
+      | existT kadd'          (tt , rd , rs1 , rs2)  => add'          rd  rs1 rs2
       | existT ksub           (tt , rd , rs1 , rs2)  => sub           rd  rs1 rs2
       | existT kslt           (tt , rd , rs1 , rs2)  => slt           rd  rs1 rs2
       | existT kslti          (tt , rd , rs , imm)   => slti          rd  rs  imm
@@ -326,6 +330,7 @@ Module Export MinCapsBase <: Base.
       | sd            rs1 rs2 imm => existT ksd            (tt , rs1 , rs2 , imm)
       | addi          rd  rs  imm => existT kaddi          (tt , rd , rs , imm)
       | add           rd  rs1 rs2 => existT kadd           (tt , rd , rs1 , rs2)
+      | add'          rd  rs1 rs2 => existT kadd'          (tt , rd , rs1 , rs2)
       | sub           rd  rs1 rs2 => existT ksub           (tt , rd , rs1 , rs2)
       | slt           rd  rs1 rs2 => existT kslt           (tt , rd , rs1 , rs2)
       | slti          rd  rs  imm => existT kslti          (tt , rd , rs , imm)
diff --git a/case_study/MinimalCaps/Contracts.v b/case_study/MinimalCaps/Contracts.v
index 860b0a1..9f2c4b2 100644
--- a/case_study/MinimalCaps/Contracts.v
+++ b/case_study/MinimalCaps/Contracts.v
@@ -532,6 +532,9 @@ Module Import MinCapsSpecification <: Specification MinCapsBase MinCapsProgram M
       Definition sep_contract_exec_add : SepContractFun exec_add :=
         mach_inv_contract.
 
+      Definition sep_contract_exec_add' : SepContractFun exec_add' :=
+        mach_inv_contract.
+
       Definition sep_contract_exec_sub : SepContractFun exec_sub :=
         mach_inv_contract.
 
@@ -706,6 +709,7 @@ Module Import MinCapsSpecification <: Specification MinCapsBase MinCapsProgram M
           | exec_csetboundsimm     => Some sep_contract_exec_csetboundsimm
           | exec_addi              => Some sep_contract_exec_addi
           | exec_add               => Some sep_contract_exec_add
+          | exec_add'              => Some sep_contract_exec_add'
           | exec_sub               => Some sep_contract_exec_sub
           | exec_slt               => Some sep_contract_exec_slt
           | exec_slti              => Some sep_contract_exec_slti
@@ -1174,6 +1178,9 @@ Module MinCapsValidContracts.
   Lemma valid_contract_exec_add : ValidContractReflect exec_add.
   Proof. reflexivity. Qed.
 
+  Lemma valid_contract_exec_add' : ValidContractReflect exec_add'.
+  Proof. reflexivity. Qed.
+
   Lemma valid_contract_exec_sub : ValidContractReflect exec_sub.
   Proof. reflexivity. Qed.
 
@@ -1275,6 +1281,7 @@ Module MinCapsValidContracts.
     - apply (valid_contract_reflect _ H valid_contract_exec_sd).
     - apply (valid_contract_reflect _ H valid_contract_exec_addi).
     - apply (valid_contract_reflect _ H valid_contract_exec_add).
+    - apply (valid_contract_reflect _ H valid_contract_exec_add').
     - apply (valid_contract_reflect _ H valid_contract_exec_sub).
     - apply (valid_contract_reflect _ H valid_contract_exec_slt).
     - apply (valid_contract_reflect _ H valid_contract_exec_slti).
@@ -1351,6 +1359,7 @@ Section Statistics.
       existT _ (existT _ exec_cgettag);
       existT _ (existT _ exec_addi);
       existT _ (existT _ exec_add);
+      existT _ (existT _ exec_add');
       existT _ (existT _ exec_sub);
       existT _ (existT _ exec_slt);
       existT _ (existT _ exec_slti);
diff --git a/case_study/MinimalCaps/Machine.v b/case_study/MinimalCaps/Machine.v
index 309fac0..9fff2d4 100644
--- a/case_study/MinimalCaps/Machine.v
+++ b/case_study/MinimalCaps/Machine.v
@@ -87,6 +87,7 @@ Section FunDeclKit.
   | exec_sd            : Fun ["rs1" :: ty.src; "rs2" :: ty.src; "imm" :: ty.int] ty.bool
   | exec_addi          : Fun ["rd"  :: ty.dst; "rs"  :: ty.src; "imm" :: ty.int] ty.bool
   | exec_add           : Fun ["rd"  :: ty.dst; "rs1" :: ty.src; "rs2" :: ty.src] ty.bool
+  | exec_add'          : Fun ["rd"  :: ty.dst; "rs1" :: ty.src; "rs2" :: ty.src] ty.bool
   | exec_sub           : Fun ["rd"  :: ty.dst; "rs1" :: ty.src; "rs2" :: ty.src] ty.bool
   | exec_slt           : Fun ["rd"  :: ty.dst; "rs1" :: ty.src; "rs2" :: ty.src] ty.bool
   | exec_slti          : Fun ["rd"  :: ty.dst; "rs"  :: ty.src; "imm" :: ty.int] ty.bool
@@ -462,8 +463,17 @@ Section FunDefKit.
       call update_pc ;;
       stm_val ty.bool true.
 
+    Definition fun_exec_add' : Stm ["rd" :: ty.dst; "rs1" :: ty.src; "rs2" :: ty.src] ty.bool :=
+      let: "v1" :: int := call read_reg_num (exp_var "rs1") in
+      let: "v2" :: int := call read_reg_num (exp_var "rs2") in
+      let: "res" :: int := stm_exp (exp_var "v1" + exp_var "v2") in
+      use lemma int_safe [exp_var "res"] ;;
+      call write_reg (exp_var "rd") (exp_inl (exp_var "res")) ;;
+      call update_pc ;;
+      stm_val ty.bool true.
+
     (* fun_exec_sub executes the sub instruction, which stores the subtraction
        of "rs1" and "rs2" into "rd". *)
     Definition fun_exec_sub : Stm ["rd" :: ty.dst; "rs1" :: ty.src; "rs2" :: ty.src] ty.bool :=
       let: "v1" :: int := call read_reg_num (exp_var "rs1") in
       let: "v2" :: int := call read_reg_num (exp_var "rs2") in
@@ -859,6 +869,8 @@ Section FunDefKit.
                                      (call exec_addi (exp_var "rd") (exp_var "rs") (exp_var "imm"))%exp
            | kadd           => MkAlt (pat_tuple ("rd" , "rs1" , "rs2"))
                                      (call exec_add (exp_var "rd") (exp_var "rs1") (exp_var "rs2"))%exp
+           | kadd'          => MkAlt (pat_tuple ("rd" , "rs1" , "rs2"))
+                                     (call exec_add' (exp_var "rd") (exp_var "rs1") (exp_var "rs2"))%exp
            | ksub           => MkAlt (pat_tuple ("rd" , "rs1" , "rs2"))
                                      (call exec_sub (exp_var "rd") (exp_var "rs1") (exp_var "rs2"))%exp
            | kslt           => MkAlt (pat_tuple ("rd" , "rs1" , "rs2"))
@@ -973,6 +985,7 @@ Section FunDefKit.
     | exec_csetboundsimm => fun_exec_csetboundsimm
     | exec_addi          => fun_exec_addi
     | exec_add           => fun_exec_add
+    | exec_add'          => fun_exec_add'
     | exec_sub           => fun_exec_sub
     | exec_slt           => fun_exec_slt
     | exec_slti          => fun_exec_slti
