Require Import FunctionalExtensionality.
Require Import Coq.Program.Equality.
Require Import Coq.Program.Tactics.

From Equations Require Import Equations.
Require Import Equations.Prop.EqDec.

Require Import MicroSail.Syntax.
Require Import MicroSail.Environment.
Require Import MicroSail.Sep.Logic.
Require Import MicroSail.Sep.Spec.
(* Require Import MicroSail.Sep.Hoare. *)

(* Simple model (aka Logic Instance) using disjoint register-heaps *)

(* VST heavily relies of predicate extensionality to establish equality of
   heap propositions. To the contrary, Mirror Shard does not assume pred ext, but
   proves implications (even not <->) instead of qualities.

   The logic typelcasses we adopted from VST are tailored towards pred ext; thus, perhaps,
   we will need to look into other interfaces or adopt pred ext. *)


Module Disjoint
       (Import termkit : TermKit)
       (Import progkit : ProgramKit termkit)
       (Import assertkit : AssertionKit termkit progkit)
       (Import contractkit : SymbolicContractKit termkit progkit assertkit).

  Import LogicNotations.
  Open Scope logic.

  Definition Heap : Type := forall œÉ, ùëπùë¨ùëÆ œÉ -> option (Lit œÉ).

  (* convert a register store into a heap *)
  Definition heap (rs : RegStore) : Heap :=
    fun _ r => Some (read_register rs r).

  Definition emp : Heap := fun _ _ => None.

  (* A heap is total if every register points to a Some *)
  Definition Total (h : Heap) : Prop :=
    forall œÉ r, exists v, h œÉ r = Some v.

  Definition HProp : Type := Heap -> Prop.

  Instance HProp_ILogic : ILogic HProp :=
  { land := (fun P Q => (fun Œ≥ => P Œ≥ /\ Q Œ≥));
    lor  := (fun P Q => (fun Œ≥ => P Œ≥ \/ Q Œ≥));
    (* existential quantification *)
    lex := (fun {T : Type} (P : T -> HProp) => (fun Œ≥ => exists x, P x Œ≥));
    (* universal quantification *)
    lall := (fun {T : Type} (P : T -> HProp) => (fun Œ≥ => forall x, P x Œ≥));
    limpl := (fun P Q => (fun Œ≥ => P Œ≥ -> Q Œ≥));

    (* Prop embedding *)
    lprop := (fun (p : Prop) => (fun _ => p));
    (* P ‚ä¢ Q *)
    lentails := (fun P Q => forall Œ≥, P Œ≥ -> Q Œ≥);
  }.

  Program Instance HProp_ILogicLaws : @ILogicLaws HProp HProp_ILogic.
  Solve Obligations with firstorder.

  (* Check if two heaps are disjoint,
     Peter O'Hearn's Marktoberdorf notes call this '#'. *)
  Definition split (Œ≥ Œ≥l Œ≥r : Heap) : Prop :=
    forall (œÉ : Ty) (r : ùëπùë¨ùëÆ œÉ), (Œ≥l œÉ r = None \/ Œ≥r œÉ r = None) /\
                             Œ≥ œÉ r = match Œ≥l œÉ r with
                                     | None => Œ≥r œÉ r
                                     | Some x => Some x
                                     end.

  Definition disjoint (Œ≥l Œ≥r : Heap) : Prop :=
    forall œÉ (r : ùëπùë¨ùëÆ œÉ), Œ≥l œÉ r <> None -> Œ≥r œÉ r <> None -> False.

  Definition join (Œ≥l Œ≥r : Heap) (_ : disjoint Œ≥l Œ≥r) : Heap :=
    fun œÉ r => match Œ≥l œÉ r with
            | None => Œ≥r œÉ r
            | Some v => Some v
            end.

  Program Instance HProp_ISepLogic : ISepLogic HProp :=
  { emp := fun Œ≥ => forall œÉ r, Œ≥ œÉ r = None;
    sepcon P Q := fun Œ≥ => exists Œ≥l Œ≥r, split Œ≥ Œ≥l Œ≥r /\ P Œ≥l /\ Q Œ≥r;
    wand P Q := fun Œ≥l => forall Œ≥ Œ≥r, split Œ≥ Œ≥l Œ≥r -> P Œ≥r -> Q Œ≥
  }.

  (* Solve a heap partitioning goal of form 'split Œ≥ Œ≥l Œ≥r' *)
  Ltac heap_solve_split :=
      repeat match goal with
      | [ |- split _ _ _ ] => unfold split in *
      | [ H : split _ _ _ |- _ ] => unfold split in *
      | [ |- forall x, _] => intro
      | [ H : ?P -> _, H' : ?P |- _ ] => specialize (H H')
      | [ Œ≥ : Heap , œÉ : Ty , r : ùëπùë¨ùëÆ _ |- _ ] => destruct (Œ≥ œÉ r); clear Œ≥
      | [ H : _ /\ _ |- _ ] => destruct H
      | [ H : _ \/ _ |- _ ] => destruct H
      | [ H : Some ?l1 = Some ?l2 |- _ ] => rewrite H
      | [ |- _ /\ _ ] => split
      | [ |- _ \/ _ ] => auto
      end; cbn in *; try congruence; try eauto with seplogic.

  Create HintDb seplogic.
  Hint Unfold bientails : seplogic.

  Lemma split_eq {Œ≥1 Œ≥2 Œ≥l Œ≥r} :
    split Œ≥1 Œ≥l Œ≥r -> split Œ≥2 Œ≥l Œ≥r -> Œ≥1 = Œ≥2.
  Proof.
    intros.
    extensionality œÉ.
    extensionality r.
    heap_solve_split.
  Qed.

  Lemma split_eq_right {Œ≥ Œ≥l Œ≥r1 Œ≥r2} :
    split Œ≥ Œ≥l Œ≥r1 -> split Œ≥ Œ≥l Œ≥r2 -> Œ≥r1 = Œ≥r2.
  Proof.
    intros.
    extensionality œÉ.
    extensionality r.
    heap_solve_split.
  Qed.

  Lemma split_comm : forall Œ≥ Œ≥1 Œ≥2, split Œ≥ Œ≥1 Œ≥2 -> split Œ≥ Œ≥2 Œ≥1.
  Proof. heap_solve_split. Qed.
  Hint Resolve split_comm : seplogic.

  Lemma split_emp : forall Œ≥ Œ≥1, split Œ≥ emp Œ≥1 <-> Œ≥ = Œ≥1.
  Proof.
    intros Œ≥ Œ≥1.
    split.
    - intros H.
      extensionality œÉ. extensionality r.
      heap_solve_split.
    - heap_solve_split.
  Qed.
  Hint Resolve split_emp : seplogic.

  Lemma split_assoc_l : forall Œ≥ Œ≥l Œ≥r Œ≥ll Œ≥lr,
    split Œ≥ Œ≥l Œ≥r -> split Œ≥l Œ≥ll Œ≥lr ->
    exists f, split Œ≥ Œ≥ll f /\ split f Œ≥lr Œ≥r.
  Proof.
    intros Œ≥ Œ≥l Œ≥r Œ≥ll Œ≥lr H_split_1 H_split_2.
    exists (fun œÉ r => match Œ≥r œÉ r with
               | None => Œ≥lr œÉ r
               | Some x => Some x
               end).
    split; heap_solve_split.
  Qed.
  Hint Resolve split_assoc_l : seplogic.

  Lemma split_assoc_r : forall Œ≥ Œ≥l Œ≥r Œ≥rl Œ≥rr,
    split Œ≥ Œ≥l Œ≥r -> split Œ≥r Œ≥rl Œ≥rr ->
    exists f, split Œ≥ f Œ≥rr /\ split f Œ≥l Œ≥rl.
  Proof.
    intros Œ≥ Œ≥l Œ≥r Œ≥rl Œ≥rr H_split_1 H_split_2.
    exists (fun œÉ r => match Œ≥l œÉ r with
               | None => Œ≥rl œÉ r
               | Some x => Some x
               end).
    split; heap_solve_split.
  Qed.
  Hint Resolve split_assoc_r : seplogic.

  Lemma sepcon_comm : forall (P Q : HProp), P ‚ú± Q ‚ä¢ Q ‚ú± P.
  Proof.
    intros P Q Œ≥ H.
    destruct H as [Œ≥l [Œ≥r H]].
    exists Œ≥r. exists Œ≥l.
    destruct H as [H1 [H2 H3]].
    split.
    + apply (@split_comm _ _ _ H1).
    + firstorder.
  Qed.
  Hint Resolve sepcon_comm : seplogic.

  Lemma sepcon_assoc_forward : forall (P Q R : HProp), P ‚ú± Q ‚ú± R ‚ä¢ P ‚ú± (Q ‚ú± R).
  Proof.
    cbn.
    intros P Q R Œ≥ H.
    destruct H as [Œ≥l [Œ≥r [H_split_1 [H HR]]]].
    destruct H as [Œ≥l' [Œ≥r' [H_split_2 [HP HQ]]]].
    specialize (split_assoc_l Œ≥ Œ≥l Œ≥r Œ≥l' Œ≥r' H_split_1 H_split_2) as H_split_3.
    inversion H_split_3 as [Œ≥comp H_split_comp].
    exists Œ≥l'. exists Œ≥comp.
    split.
    * apply H_split_comp.
    * split.
    + apply HP.
    + exists Œ≥r'. exists Œ≥r.
      intuition.
  Qed.
  Hint Resolve sepcon_assoc_forward : seplogic.

  Lemma sepcon_assoc_backward : forall (P Q R : HProp), P ‚ú± (Q ‚ú± R) ‚ä¢ P ‚ú± Q ‚ú± R.
  Proof.
    intros P Q R Œ≥ H.
    cbn in *.
    destruct H as [Œ≥l [Œ≥r [H_split_1 [HP H]]]].
    destruct H as [Œ≥rl [Œ≥rr [H_split_2 [HQ HR]]]].
    specialize (split_comm _ _ _ H_split_1) as H_split_1'.
    specialize (split_comm _ _ _ H_split_2) as H_split_2'.
    specialize (split_assoc_l Œ≥ Œ≥r Œ≥l Œ≥rr Œ≥rl H_split_1' H_split_2') as H_split_3.
    destruct H_split_3 as [Œ≥comp H_split_comp].
    exists Œ≥comp, Œ≥rr.
    split.
    - intuition.
    - split.
      + exists Œ≥l, Œ≥rl.
        intuition.
      + intuition.
  Qed.
  Hint Resolve sepcon_assoc_backward : seplogic.

  Lemma wand_sepcon_adjoint : forall (P Q R : HProp),
      (P ‚ú± Q ‚ä¢ R) <-> (P ‚ä¢ Q -‚ú± R).
  Proof.
    intros P Q R.
    split.
    - intros H.
      cbn in *.
      intros Œ≥l HP Œ≥ Œ≥r H_split HQ.
      specialize (H Œ≥).
      apply H.
      exists Œ≥l. exists Œ≥r.
      intuition.
    - intros H.
      cbn in *.
      intros Œ≥l H1.
      destruct H1 as [Œ≥ll [Œ≥lr [H_split [HP HQ]]]].
      exact (H Œ≥ll HP Œ≥l Œ≥lr H_split HQ).
  Qed.
  Hint Resolve wand_sepcon_adjoint : seplogic.

  Lemma sepcon_andp_prop_forward : forall (P R : HProp) (Q : Prop),
      (P ‚ú± (!!Q ‚àß R)) ‚ä¢ (!!Q ‚àß (P ‚ú± R)).
  Proof.
    intros P R Q Œ≥ H.
    destruct H as [Œ≥l [Œ≥r [H_split [HP [HQ HR]]]]].
    split.
    - intuition.
    - cbn.
      exists Œ≥l. exists Œ≥r.
      intuition.
  Qed.
  Hint Resolve sepcon_andp_prop_forward : seplogic.

  Lemma sepcon_andp_prop_backward : forall (P R : HProp) (Q : Prop),
      (!!Q ‚àß (P ‚ú± R)) ‚ä¢ (P ‚ú± (!!Q ‚àß R)).
  Proof.
    intros P R Q Œ≥ H.
    cbn in *.
    destruct H as [HQ [Œ≥l [Œ≥r [H_split [HP HR]]]]].
    exists Œ≥l, Œ≥r.
    split; intuition.
  Qed.
  Hint Resolve sepcon_andp_prop_backward : seplogic.

  Lemma sepcon_entails: forall (P P' Q Q' : HProp),
      P ‚ä¢ P' -> Q ‚ä¢ Q' -> P ‚ú± Q ‚ä¢ P' ‚ú± Q'.
  Proof.
    intros P P' Q Q' H1 H2 Œ≥ H3.
    cbn in *.
    destruct H3 as [Œ≥l [Œ≥r [H_split [HP HQ]]]].
    exists Œ≥l, Œ≥r.
    intuition.
  Qed.
  Hint Resolve sepcon_entails : seplogic.

  Lemma sepcon_emp (P : HProp) : P ‚ú± Logic.emp ‚ä£‚ä¢s P.
  Proof.
    split.
    - intros Œ≥ (Œ≥l & Œ≥r & H1 & H2 & H3).
      assert (Œ≥r = emp).
      { extensionality œÉ.
        extensionality r.
        apply H3.
      }
      subst Œ≥r.
      apply split_comm, split_emp in H1.
      now subst Œ≥l.
    - intros Œ≥ H1. cbn.
      exists Œ≥, emp.
      split.
      apply split_comm, split_emp; reflexivity.
      split.
      assumption.
      reflexivity.
  Qed.
  Hint Resolve sepcon_emp : seplogic.

  Program Instance HProp_ISepLogicLaws : ISepLogicLaws HProp.
  Solve Obligations with eauto with seplogic.

  Instance HProp_Heaplet : IHeaplet HProp :=
  { (* We don't have any predicates in this model yet;
       thus we map the predicate to False *)
    luser (p : ùë∑) (ts : Env Lit (ùë∑_Ty p)) := fun Œ≥ => False;
    lptsreg (œÉ : Ty) (r : ùëπùë¨ùëÆ œÉ) (t : Lit œÉ) := fun Œ≥ => Œ≥ œÉ r = Some t
  }.

  Definition write_heap (Œ≥ : Heap) {œÉ} (r : ùëπùë¨ùëÆ œÉ)
    (v : Lit œÉ) : Heap :=
    fun œÑ r' =>
      match eq_dec_het r r' with
      | left e => Some (eq_rect œÉ Lit v œÑ (f_equal projT1 e))
      | right _ => Œ≥ œÑ r'
      end.

  (* writing into a heap creates a ptsreg heap chunk *)
  Lemma write_heap_ptsreg (Œ≥ : Heap) {œÉ} (r : ùëπùë¨ùëÆ œÉ) (v : Lit œÉ) :
    (write_heap Œ≥ r v) œÉ r = Some v.
  Proof.
    unfold write_heap, eq_dec_het.
    now rewrite eq_dec_refl.
  Qed.

  (* writing into a heap preserves the unaffected chunks *)
  Lemma write_heap_distinct (Œ≥focus : Heap) {œÉ œÑ}
        (r : ùëπùë¨ùëÆ œÉ) (k : ùëπùë¨ùëÆ œÑ) (prf : existT _ r <> existT _ k)
        (v0 : option (Lit œÑ)) (v : Lit œÉ) :
    Œ≥focus œÑ k = v0 -> (write_heap Œ≥focus r v) œÑ k = v0.
  Proof.
    intros H.
    rewrite <- H.
    unfold write_heap.
    destruct (eq_dec_het r k).
    + contradiction.
    + reflexivity.
  Qed.

  (* writing into a heap preserves totality *)
  Lemma write_heap_preservers_total {œÉ} :
    forall (Œ≥ : Heap), Total Œ≥ -> forall (r : ùëπùë¨ùëÆ œÉ) (v : Lit œÉ), Total (write_heap Œ≥ r v).
  Proof.
    intros Œ≥ Htotal_Œ≥ r v œÑ k.
    specialize (Htotal_Œ≥ œÑ k); destruct Htotal_Œ≥ as [v0 Hpre].
    unfold write_heap.
    destruct (eq_dec_het r k).
    + eexists. reflexivity.
    + exists v0. apply Hpre.
  Qed.

  (* If a value is present in one of the two disjoint subheaps, then
     it must be absent in the other *)
  Lemma split_in_r_then_not_in_l {œÉ}
        (Œ≥ Œ≥l Œ≥r : Heap) (r : ùëπùë¨ùëÆ œÉ) (v : Lit œÉ) :
        split Œ≥ Œ≥l Œ≥r -> Œ≥r œÉ r = Some v -> Œ≥l œÉ r = None.
  Proof.
    intros Hsplit_Œ≥ H.
    unfold split in Hsplit_Œ≥.
    specialize (Hsplit_Œ≥ œÉ r) as [[Heq1|Heq1] Heq2].
    - rewrite Heq1 in Heq2.
      congruence.
    - congruence.
  Qed.

  (* If a value is the heap is total and a value is absent in
     one if the disjoint subheaps then in must be present in the other *)
  Lemma split_not_in_r_then_in_l {œÉ}
        (Œ≥ Œ≥l Œ≥r : Heap) (r : ùëπùë¨ùëÆ œÉ) :
        Total Œ≥ -> split Œ≥ Œ≥l Œ≥r -> Œ≥r œÉ r = None -> (exists v, Œ≥l œÉ r = Some v).
  Proof.
    intros Htotal_Œ≥ Hsplit_Œ≥ H.
    unfold split in Hsplit_Œ≥.
    unfold Total in *.
    specialize (Hsplit_Œ≥ œÉ r).
    destruct_conjs.
    destruct H0.
    + rewrite H0 in H1.
      specialize (Htotal_Œ≥ œÉ r).
      destruct_conjs. congruence.
    + rewrite H0 in H1.
      destruct (Œ≥l œÉ r).
      ++ now exists l.
      ++ specialize (Htotal_Œ≥ œÉ r).
         destruct_conjs.
         congruence.
  Qed.

  Lemma write_register_write_heap (rs : RegStore) {œÉ} (r : ùëπùë¨ùëÆ œÉ) (v : Lit œÉ) :
    heap (write_register rs r v) = write_heap (heap rs) r v.
  Proof.
    extensionality œÑ.
    extensionality k.
    unfold heap, write_heap; cbn.
    destruct (eq_dec_het r k).
    - f_equal.
      dependent elimination e; cbn.
      now rewrite read_write.
    - now rewrite read_write_distinct.
  Qed.

End Disjoint.
