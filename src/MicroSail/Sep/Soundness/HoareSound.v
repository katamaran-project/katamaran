Require Import Coq.Program.Tactics.
Require Import Coq.Program.Equality.
Require Import FunctionalExtensionality.
Require Import Equations.Equations.

Require Import MicroSail.Syntax.
Require Import MicroSail.Tactics.
Require Import MicroSail.Environment.
Require Import MicroSail.SmallStep.Inversion.
Require Import MicroSail.Sep.Logic.
Require Import MicroSail.Sep.Spec.
Require Import MicroSail.Sep.Hoare.
Require Import MicroSail.Sep.Model.Disjoint.

Module HoareSound
       (Import termkit : TermKit)
       (Import progkit : ProgramKit termkit)
       (Import assertkit : AssertionKit termkit progkit)
       (Import contractkit : SymbolicContractKit termkit progkit assertkit).

  Module SSI := Inversion termkit progkit.
  Import SSI.
  Import SS.

  Module PL := ProgramLogic termkit progkit assertkit contractkit.
  Import PL.

  Module Model := Disjoint termkit progkit assertkit contractkit.
  Import Model.

  Section Soundness.

    Open Scope logic.
    Import EnvNotations.

    Local Ltac sound_inversion :=
      lazymatch goal with
      | [ H: ‚ü® _, _, _, stm_let _ _ ?s ?k ‚ü© ---> ‚ü® _, _, _, _ ‚ü©, HF: Final ?s |- _ ] =>
        is_var s; apply (step_inversion_let HF) in H;
        microsail_destruct_propositional H; subst; cbn in *
      | [ H: ‚ü® _, _, _, ?s ‚ü© ---> ‚ü® _, _, _, _ ‚ü© |- _ ] =>
        microsail_stm_primitive_step s;
        dependent elimination H

      | [ H: ‚ü® _, _, _, stm_lit _ _ ‚ü© --->* ‚ü® _, _, _, _ ‚ü© |- _ ] =>
        apply steps_inversion_lit in H;
        microsail_destruct_propositional H; subst; cbn in *
      | [ H: ‚ü® _, _, _, stm_fail _ _ ‚ü© --->* ‚ü® _, _, _, _ ‚ü© |- _ ] =>
        apply steps_inversion_fail in H;
        microsail_destruct_propositional H; subst; cbn in *
      | [ H: ‚ü® _, _, _, ?s ‚ü© --->* ‚ü® _, _, _, ?t ‚ü©, HF: Final ?t |- _ ] =>
        first
          [ lazymatch head s with
            | @stm_exp        => apply (steps_inversion_exp           HF) in H
            | @stm_call_frame => apply (steps_inversion_ex_call_frame HF) in H
            | @stm_let        => apply (steps_inversion_ex_let        HF) in H
            | @stm_block      => apply (steps_inversion_ex_block      HF) in H
            | @stm_seq        => apply (steps_inversion_ex_seq        HF) in H
            | @stm_assign     => apply (steps_inversion_ex_assign     HF) in H
            | @stm_bind       => apply (steps_inversion_ex_bind       HF) in H
            end;
            microsail_destruct_propositional H; subst; cbn in *
          | microsail_stm_primitive_step s;
            dependent elimination H;
            [ contradiction HF | idtac ]
          ]
      end.

    Local Ltac sound_simpl :=
      match goal with
      | [ H: ?x = ?x |- _ ] => clear H
      | [ H: True |- _ ] => clear H
      | [ H: False |- _ ] => destruct H
      | [ H: Env _ (ctx_snoc _ _) |- _ ] =>
        dependent elimination H
      | [ H: Env _ ctx_nil |- _ ] =>
        dependent elimination H
      | [ H: context[env_drop _ (_ ‚ñ∫‚ñ∫ _)]|- _] =>
        rewrite env_drop_cat in H
      | [ _: context[match eval ?e ?Œ¥ with _ => _ end] |- _ ] =>
        destruct (eval e Œ¥) eqn:?
      end.

    Lemma resultorfail_monotonicity {Œì œÉ} {s : Stm Œì œÉ} {P Q : Lit œÉ -> Prop} :
      (forall v, P v -> Q v) -> ResultOrFail s P -> ResultOrFail s Q.
    Proof. destruct s; firstorder. Qed.

    Local Ltac sound_inster :=
      match goal with
      | [ Hsplit : split (heap ?Œ≥) ?Œ≥frame ?Œ≥focus
          |- exists (_ : Heap), split (heap ?Œ≥) ?Œ≥frame _ /\ _
        ] => exists Œ≥focus; split; [ exact Hsplit | idtac]
      | [ IH: context[‚ü® _, _, _ , ?s ‚ü© --->* ‚ü® _, _, _ , _ ‚ü© -> _],
          HS: ‚ü® _, _, _ , ?s ‚ü© --->* ‚ü® _, _, _ , _ ‚ü© |- _ ] =>
        microsail_insterU (cbn; eauto) IH;
        microsail_check_noevar_hyp IH; cbn in IH;
        microsail_destruct_propositional IH
      | [ IH: context[‚ü® _, _, _ , ?alt _ ‚ü© --->* ‚ü® _, _, _ , _ ‚ü© -> _],
          HS: ‚ü® _, _, _ , ?alt _ ‚ü© --->* ‚ü® _, _, _ , _ ‚ü© |- _ ] =>
        microsail_insterU (cbn; eauto) IH;
        microsail_check_noevar_hyp IH; cbn in IH;
        microsail_destruct_propositional IH
      | [H: ResultOrFail ?s _ |- ResultOrFail ?s _] =>
        refine (resultorfail_monotonicity _ H)
      end.

    Local Ltac sound_solve :=
      repeat
        (destruct_conjs;
         repeat sound_inversion;
         repeat sound_simpl;
         repeat sound_inster;
         auto).

    Lemma RegStoreIsTotal (rs : RegStore) : Total (heap rs).
    Proof.
      intros œÉ r.
      exists (read_register rs r).
      now unfold heap.
    Qed.

    Definition ValidContractEnv' (cenv : SepContractEnv) : Prop :=
      forall œÉs œÉ (f : ùë≠ œÉs œÉ),
        match cenv œÉs œÉ f with
        | Some (MkSepContract _ _ Œ£ Œ∏Œî pre result post) =>
          forall (Œπ : SymInstance Œ£)
                 (Œ≥ Œ≥' : RegStore) (Œº Œº' : Memory) (Œ¥ Œ¥' : LocalStore œÉs) (s' : Stm œÉs œÉ),
            ‚ü® Œ≥, Œº, Œ¥, Pi f ‚ü© --->* ‚ü® Œ≥', Œº', Œ¥', s' ‚ü© -> Final s' ->
            forall (Œ≥frame Œ≥focus : Heap),
              split (heap Œ≥) Œ≥frame Œ≥focus ->
              (inst_assertion (L:=HProp) Œπ pre) Œ≥focus ->
              exists (Œ≥focus' : Heap),
                split (heap Œ≥') Œ≥frame Œ≥focus' /\
                ResultOrFail s' (fun v => inst_assertion (env_snoc Œπ (result , œÉ) v) post Œ≥focus')
        | None => False
        end.

    Hypothesis validCEnv : ValidContractEnv' CEnv.

    Lemma sound {Œì œÉ} (s : Stm Œì œÉ) :
      forall (Œ≥ Œ≥' : RegStore) (Œº Œº' : Memory) (Œ¥ Œ¥' : LocalStore Œì) (s' : Stm Œì œÉ),
        ‚ü® Œ≥, Œº, Œ¥, s ‚ü© --->* ‚ü® Œ≥', Œº', Œ¥', s' ‚ü© -> Final s' ->
        forall (PRE : HProp) (POST : Lit œÉ -> LocalStore Œì -> HProp)
               (triple : Œ¥ ‚ä¢ ‚¶É PRE ‚¶Ñ s ‚¶É POST ‚¶Ñ)
               (Œ≥frame Œ≥focus : Heap),
          split (heap Œ≥) Œ≥frame Œ≥focus ->
          PRE Œ≥focus ->
          exists (Œ≥focus' : Heap),
            split (heap Œ≥') Œ≥frame Œ≥focus' /\
            ResultOrFail s' (fun v => POST v Œ¥' Œ≥focus').
    Proof.
      intros Œ≥ Œ≥' Œº Œº' Œ¥ Œ¥' s' Hsteps Hfinal
             PRE POST triple Œ≥frame Œ≥focus Hsplit_Œ≥ Hpre.
      revert Hpre Hsplit_Œ≥.
      generalize dependent Œ≥focus.
      generalize dependent Œ≥frame.
      revert Hsteps Hfinal.
      generalize dependent s'.
      revert Œ≥ Œ≥' Œº Œº' Œ¥'.
      induction triple; cbn; intros.
      (* consequence *)
      - sound_solve. intuition.
      (* frame *)
      - destruct Hpre as (Œ≥l & Œ≥r & Hsplit_Œ≥focus & HR & HP).
        destruct (split_assoc_r (heap Œ≥) Œ≥frame Œ≥focus Œ≥l Œ≥r Hsplit_Œ≥ Hsplit_Œ≥focus)
          as (Œ≥0 & Hsplit_Œ≥0r & Hsplit_Œ≥framer).
        microsail_insterU (eauto) IHtriple.
        destruct IHtriple as (Œ≥r' & Hsplit_Œ≥' & IH).
        destruct (split_assoc_l (heap Œ≥') Œ≥0 Œ≥r' Œ≥frame Œ≥l Hsplit_Œ≥' Hsplit_Œ≥framer)
          as (Œ≥focus' & Hsplit_Œ≥'' & Hsplit_Œ≥focus').
        repeat sound_inster.
        intros. exists Œ≥l, Œ≥r'. auto.
      (* pull *)
      - sound_solve.
      (* rule_exists *)
      - sound_solve.
      (* (* rule_forall *) *)
      (* - pose proof (H x). *)
      (*   microsail_insterU (eauto) H0. *)
      (*   destruct_conjs. *)
      (*   sound_inster. *)
      (*   destruct s'; cbn in *; try contradiction; auto. *)
      (*   intros. *)
      (*   pose proof (H x0). *)
      (*   microsail_insterU (eauto) H3. *)
      (*   destruct_conjs; cbn in *. *)
      (*   pose proof (split_eq_right H1 H4); subst; auto. *)
      (* rule_stm_lit *)
      - sound_solve.
      (* rule_stm_exp *)
      - sound_solve.
      (* rule_stm_let *)
      - sound_solve.
      (* rule_stm_block *)
      - sound_solve.
      (* rule_stm_if *)
      - sound_solve.
      (* rule_stm_seq *)
      - sound_solve.
      (* rule_stm_assert *)
      - sound_solve.
      (* rule_stm_fail *)
      - sound_solve.
      (* rule_stm_match_list *)
      - sound_solve.
      (* rule_stm_match_sum *)
      - sound_solve.
      (* rule_stm_match_pair *)
      - sound_solve.
      (* rule_stm_match_enum *)
      - sound_solve.
      (* rule_stm_match_tuple *)
      - sound_solve.
      (* rule_stm_match_union *)
      - sound_solve.
        destruct (ùëº_unfold (eval e10 Œ¥)) eqn:Heq.
        assert (ùëº_fold (ùëº_unfold (eval e10 Œ¥)) = ùëº_fold (existT x l)) as Heq' by now f_equal.
        rewrite ùëº_fold_unfold in Heq'.
        sound_solve.
      (* rule_stm_match_record *)
      - sound_solve.
      (* rule_stm_read_register *)
      - sound_solve.
        repeat (split; auto).
        specialize (Hsplit_Œ≥ _ r0); cbn in *.
        destruct Hsplit_Œ≥ as [[Heq1|Heq1] Heq2].
        + rewrite Heq1, Hpre in Heq2.
          unfold heap in Heq2.
          congruence.
        + congruence.
      (* rule_stm_write_register *)
      - sound_solve.
        rename Œ≥ into Œ≥__pre, r1 into reg, v into v__pre, v5 into v__post, œÑ into œÉ, e11 into e, Œ¥3 into Œ¥.
        exists (write_heap Œ≥focus reg v__post); cbn.
        specialize (write_heap_ptsreg Œ≥focus reg v__post) as Hpost.
        split; auto.
        rewrite write_register_write_heap.
        intros œÑ k.
        specialize (Hsplit_Œ≥ œÑ k) as H__k.
        destruct_conjs.
        destruct (eq_dec_het reg k).
        + dependent elimination e0.
          destruct H; [ idtac | congruence ].
          rewrite H in *.
          split; auto.
          now rewrite !write_heap_ptsreg.
        + destruct H.
          * rewrite H in *; split; auto.
            erewrite !write_heap_distinct; eauto.
          * eapply split_not_in_r_then_in_l in Hsplit_Œ≥; eauto using RegStoreIsTotal.
            destruct_conjs.
            rewrite H1 in *.
            erewrite !write_heap_distinct; eauto.
            congruence.
      (* rule_stm_assign_backwards *)
      - sound_solve.
      (* rule_stm_assign_forwards *)
      - sound_solve.
        exists (H ‚Äº x)%exp.
        now rewrite env_update_update, env_update_lookup, env_lookup_update.
      (* rule_stm_call_forwards *)
      - admit.
      (* rule_stm_call_inline *)
      - sound_solve.
      (* rule_stm_call_frame *)
      - sound_solve.
      (* rule_stm_call_external_backwards *)
      - admit.
      (* rule_stm_bind *)
      - sound_solve.
    Admitted.

  End Soundness.

End HoareSound.
