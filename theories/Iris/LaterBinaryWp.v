(*****************************************************************************)
(* Copyright (c) 2020 Dominique Devriese, Sander Huyghebaert, Steven Keuchel  *)
(* All rights reserved.                                                       *)
(*                                                                            *)
(* Redistribution and use in source and binary forms, with or without         *)
(* modification, are permitted provided that the following conditions are     *)
(* met:                                                                       *)
(*                                                                            *)
(* 1. Redistributions of source code must retain the above copyright notice,  *)
(*    this list of conditions and the following disclaimer.                   *)
(*                                                                            *)
(* 2. Redistributions in binary form must reproduce the above copyright       *)
(*    notice, this list of conditions and the following disclaimer in the     *)
(*    documentation and/or other materials provided with the distribution.    *)
(*                                                                            *)
(* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS        *)
(* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED  *)
(* TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR *)
(* PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR          *)
(* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,      *)
(* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,        *)
(* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR         *)
(* PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF     *)
(* LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING       *)
(* NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS         *)
(* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.               *)
(******************************************************************************)

From Coq Require Import
  Program.Equality.
From Equations Require Import
     Equations Signature.
Require Import Equations.Prop.EqDec.

From stdpp Require finite gmap list.

From iris Require Import
     algebra.auth
     algebra.excl
     algebra.gmap
     base_logic.lib.fancy_updates
     base_logic.lib.gen_heap
     base_logic.lib.own
     bi.big_op
     bi.interface
     program_logic.adequacy
     program_logic.weakestpre
     proofmode.tactics.

From Katamaran Require Import
     Iris.Model
     Iris.Instance
     Prelude
     Semantics
     Sep.Hoare
     Sep.Logic
     Signature
     SmallStep.Step
     Specification
     BinaryModel.

Import ctx.notations.
Import env.notations.

Set Implicit Arguments.

(* The following three modules define the Iris instance of the program logic
   depending solely on the operational semantics (through IrisBase) and the
   user-defined predicates (in IrisPredicates), but without depending on a
   Specification module. The program logic rules of this subset are implemented
   in IrisSignatureRules, which is combined with IrisPredicates to form
   IrisInstance.

   This split allows us to use multiple different specifications with the same
   Iris model, so that the resulting triples can be combined. This is important
   particularly when combining specifications of universal contracts for unknown
   code with known code verifications, e.g. as in the RiscvPmp.BlockVerification
   proofs. *)

Module Type IrisPredicates2
  (Import B    : Base)
  (Import SIG  : Signature B)
  (Import PROG : Program B)
  (Import SEM  : Semantics B PROG)
  (Import IB   : IrisBase2 B PROG SEM).
  Parameter luser_inst2 : forall `{sRG : sailRegGS2 Œ£} `{invGS Œ£} `{mG : memGS2 Œ£} (p : ùëØ) (ts : Env Val (ùëØ_Ty p)), iProp Œ£.
  Parameter lduplicate_inst2 : forall `{sRG : sailRegGS2 Œ£} `{invGS Œ£} {mG : memGS2 Œ£} (p : ùëØ) (ts : Env Val (ùëØ_Ty p)),
      is_duplicable p = true ->
      luser_inst2 ts ‚ä¢ luser_inst2 ts ‚àó luser_inst2 ts.

End IrisPredicates2.

Module Type IrisBinaryWPParameters
  (Import B     : Base)
  (Import SIG   : Signature B)
  (Import PROG  : Program B)
  (Import SEM   : Semantics B PROG)
  (Import IP    : IrisParameters B)
  (Import IB    : IrisBase2 B PROG SEM)
  (Import IPred : IrisPredicates2 B SIG PROG SEM IB).

  Parameter reg_inv2       : forall `{sG : sailRegGS2 Œ£}, RegStore -> RegStore -> iProp Œ£.
  (* Parameter reg_inv_l      : forall `{sG : sailRegGS Œ£}, RegStore -> iProp Œ£.
  Parameter reg_inv_r      : forall `{sG : sailRegGS Œ£}, RegStore -> iProp Œ£.
  Parameter reg_inv2_split : forall `{sG : sailRegGS2 Œ£} (Œ≥l Œ≥r : RegStore),
      reg_inv2 Œ≥l Œ≥r ‚ä£‚ä¢ @reg_inv_l _ sailRegGS2_sailRegGS_left Œ≥l ‚àó @reg_inv_r _ sailRegGS2_sailRegGS_right Œ≥r. *)
  Parameter mem_inv2   : forall `{mG : memGS2 Œ£}, Memory -> Memory -> iProp Œ£.
  (* Parameter mem_inv_l  : forall `{mG : memGS Œ£}, Memory -> iProp Œ£.
  Parameter mem_inv_r  : forall `{mG : memGS Œ£}, Memory -> iProp Œ£. *)
  Parameter mc_memGS_left : forall `{mG : memGS2 Œ£}, memGS Œ£.
  Parameter mc_memGS_right : forall `{mG : memGS2 Œ£}, memGS Œ£.
  Parameter mem_inv2_split : forall `{sG : sailGS2 Œ£} (Œºl Œºr : Memory),
      mem_inv2 Œºl Œºr ‚ä£‚ä¢ @mem_inv _ mc_memGS_left Œºl ‚àó @mem_inv _ mc_memGS_right Œºr.
End IrisBinaryWPParameters.

(* IrisBinaryWPAsymmetric allows asymmetry between the executions. The left
   program is allowed to take zero or one step, the right one always needs to
   be able to take a step. *)

Module IrisBinaryWPAsymmetric (B : Base) (SIG : Signature B) (PROG : Program B)
  (SEM : Semantics B PROG) (IP : IrisParameters B) (IB : IrisBase2 B PROG SEM) (IPred : IrisPredicates2 B SIG PROG SEM IB)
  <: IrisBinaryWPParameters B SIG PROG SEM IP IB IPred.
  Import B SIG PROG SEM IP IB IPred.

  Definition reg_inv2   := @regs_inv2.
  Lemma reg_inv2_split : forall `{sG : sailRegGS2 Œ£} (Œ≥l Œ≥r : RegStore),
      reg_inv2 _ Œ≥l Œ≥r ‚ä£‚ä¢ @regs_inv _ sailRegGS2_sailRegGS_left Œ≥l ‚àó @regs_inv _ sailRegGS2_sailRegGS_right Œ≥r.
  Proof. by rewrite /reg_inv2. Qed.
  
  Definition mem_inv2   := @mem_inv2.
  Parameter mc_memGS_left : forall `{mG : memGS2 Œ£}, memGS Œ£.
  Parameter mc_memGS_right : forall `{mG : memGS2 Œ£}, memGS Œ£.
  Parameter mem_inv2_split : forall `{sG : sailGS2 Œ£} (Œºl Œºr : Memory),
      @mem_inv2 _ _ Œºl Œºr ‚ä£‚ä¢ @mem_inv _ mc_memGS_left Œºl ‚àó @mem_inv _ mc_memGS_right Œºr.
End IrisBinaryWPAsymmetric.

Module IrisBinaryWP
  (Import B     : Base)
  (Import SIG   : Signature B)
  (Import PROG  : Program B)
  (Import SEM   : Semantics B PROG)
  (Import IP    : IrisParameters B)
  (Import IB    : IrisBase2 B PROG SEM)
  (Import IPred : IrisPredicates2 B SIG PROG SEM IB)
  (Import IWP   : IrisBinaryWPParameters B SIG PROG SEM IP IB IPred).

  Section WithSailGS2.
  Context `{sG : sailGS2 Œ£}.

  #[export] Program Instance PredicateDefIProp : PredicateDef (iProp Œ£) :=
    {| lptsreg œÉ r v        := reg_pointsTo2 r v v;
       luser p ts           := luser_inst2 ts;
       lduplicate p ts Hdup := lduplicate_inst2 ts Hdup
    |}.

  (* Declare necessary OFE instances. Don't use them directly, they will be
     resolved when needed. *)
  Canonical Structure PCtxO     := leibnizO PCtx.
  Canonical Structure TyO       := leibnizO Ty.
  Canonical Structure CStoreO Œì := leibnizO (CStore Œì).
  Canonical Structure StmO Œì œÑ  := leibnizO (Stm Œì œÑ).
  Canonical Structure ValO œÑ    := leibnizO (Val œÑ).

  Definition Post2 Œì1 Œì2 œÑ :=
    Val œÑ -> CStore Œì1 -> Val œÑ -> CStore Œì2 -> iProp Œ£.
  Canonical Structure Post2O Œì1 Œì2 œÑ := leibnizO (Post2 Œì1 Œì2 œÑ).

  Definition Post Œì œÑ :=
    Val œÑ -> CStore Œì -> RegStore -> Memory -> iProp Œ£.
  Canonical Structure PostO Œì œÑ := leibnizO (Post Œì œÑ).

  Definition Wp {Œì œÑ} {sG : sailRegGS Œ£} {mG : memGS Œ£} :=
    CStore Œì -d> Stm Œì œÑ -d> RegStore -d> Memory -d> Post Œì œÑ -d> iProp Œ£.

  Definition Wp2 {Œì1 Œì2 œÑ} :=
    CStore Œì1 -d> CStore Œì2 -d>
    Stm Œì1 œÑ -d> Stm Œì2 œÑ -d>
    Post2 Œì1 Œì2 œÑ -d>
    iProp Œ£.

  (* IDEA: borrow idea of Atomic of Iris. When s1 and s2 are atomic, they are
           allowed to open the invariants and close them.
           Some useful resources to look at:
           - iris/program_logic/weakestpre.v > wp_atomic
           - iris/program_logic/atomic.v > atomic_wp_inv

           It might be that some restrictions that apply to wp2 are only
           exposed at the ISA level (for example, MMIO interactions ‚â° effects)

           How does PMP come into play? Can we capture non-interferene of U-mode
           data through invariants? (I would assume so)

           How does other work reason about invariants with fewer restrictions
           in the wp2?
           - SeLoC: wp2 requires lockstep, they also put limitations on the
             shapes of data (calendar example, always same length so that
             the loop of the program takes the same nr of steps in both
             executions)
           - "A machine-checked framework for relational sep. logic":
             Similar requirements about symmetric execution, they require
             that before each loop or branch statement the state is identical,
             i.e., the same nr of iterations for loops, the same branch is
             taken for branches
           - ReLoC: focuses on refinements. Interesting is that they have two
             rules that allow taking a step either on the left or right (for
             example, see the rule rel-pure-l).
   *)
  Ltac f_equiv_more_arities := match goal with
  | H:_ ?f ?g |- ?R (?f ?x ?y ?z1) (?g ?x ?y ?z1) => solve [ simple apply H ]
  | H:_ ?f ?g |- ?R (?f ?x ?y ?z1 ?z2) (?g ?x ?y ?z1 ?z2) => solve [ simple apply H ]
  | H:_ ?f ?g |- ?R (?f ?x ?y ?z1 ?z2 ?z3) (?g ?x ?y ?z1 ?z2 ?z3) => solve [ simple apply H ]
  | H:_ ?f ?g |- ?R (?f ?x ?y ?z1 ?z2 ?z3 ?z4) (?g ?x ?y ?z1 ?z2 ?z3 ?z4) => solve [ simple apply H ]
  | H:_ ?f ?g |- ?R (?f ?x ?y ?z1 ?z2 ?z3 ?z4 ?z5) (?g ?x ?y ?z1 ?z2 ?z3 ?z4 ?z5) => solve [ simple apply H ]
  | H:_ ?f ?g |- ?R (?f ?x ?y ?z1 ?z2 ?z3 ?z4 ?z5 ?z6) (?g ?x ?y ?z1 ?z2 ?z3 ?z4 ?z5 ?z6) => solve [ simple apply H ]
  | H:_ ?f ?g |- ?R (?f ?x ?y ?z1 ?z2 ?z3 ?z4 ?z5 ?z6 ?z7) (?g ?x ?y ?z1 ?z2 ?z3 ?z4 ?z5 ?z6 ?z7) => solve [ simple apply H ]
  | H:_ ?f ?g |- ?R (?f ?x ?y ?z1 ?z2 ?z3 ?z4 ?z5 ?z6 ?z7 ?z8) (?g ?x ?y ?z1 ?z2 ?z3 ?z4 ?z5 ?z6 ?z7 ?z8) => solve [ simple apply H ]
  end.

  Ltac solve_contractive_more_arities := solve_proper_core ltac:(fun _ => first [ f_contractive | f_equiv | f_equiv_more_arities]).

  (* TODO: we actually need to "drag" the other stm and store too, so that we
     always have the same nr of ‚ñ∑'s in each conjunct of semWp2. (similar to max_steps below) *)
  Definition semWp_fix {Œì œÑ} {sG : sailRegGS Œ£} {mG : memGS Œ£} (wp : @Wp _ _ sG mG) : @Wp _ _ sG mG :=
    (Œª (Œ¥ : CStore Œì) (s : Stm Œì œÑ) (Œ≥ : RegStore) (Œº : Memory) (POST : Post Œì œÑ),
      match stm_to_val s with
      | Some v => POST v Œ¥ Œ≥ Œº
      | _      =>
          @regs_inv _ sG Œ≥ ‚àó @mem_inv _ mG Œº -‚àó
               (‚àÄ (s' : Stm Œì œÑ) (Œ¥' : CStore Œì)
                  (Œ≥' : RegStore) (Œº' : Memory),
                   ‚åú‚ü® Œ≥, Œº, Œ¥, s ‚ü© ---> ‚ü® Œ≥', Œº', Œ¥', s' ‚ü©‚åù -‚àó (* ={‚àÖ}‚ñ∑=‚àó *)
                    ‚ñ∑ ((@regs_inv _ sG Œ≥' ‚àó @mem_inv _ mG Œº') ‚àó wp Œ¥' s' Œ≥' Œº' POST))
      end)%I.
  Global Arguments semWp_fix {_}%_ctx_scope {_ _ _} wp /.

  Global Instance semWp_fix_Contractive {Œì œÑ sR mG} :
    Contractive (@semWp_fix Œì œÑ sR mG).
  Proof. unfold Wp; solve_contractive_more_arities. Qed.

  Definition semWp {Œì œÑ sR mG} : @Wp _ _ sR mG :=
    Œª Œ¥ s POST, (fixpoint (@semWp_fix Œì œÑ sR mG)) Œ¥ s POST.

  Lemma fixpoint_semWp_fix_eq {Œì œÑ sR mG} (Œ¥ : CStore Œì) (s : Stm Œì œÑ) (Œ≥ : RegStore)
    (Œº : Memory) (POST : Post Œì œÑ) :
    fixpoint (@semWp_fix _ _ sR mG) Œ¥ s Œ≥ Œº POST ‚â° @semWp_fix _ _ sR mG (fixpoint semWp_fix) Œ¥ s Œ≥ Œº POST.
  Proof. exact: (fixpoint_unfold semWp_fix Œ¥ s Œ≥ Œº POST). Qed.

  Lemma fixpoint_semWp_eq {Œì œÑ sR mG} (Œ¥ : CStore Œì) (s : Stm Œì œÑ)
    (Œ≥ : RegStore) (Œº : Memory) (POST : Post Œì œÑ) :
    @semWp _ _ sR mG Œ¥ s Œ≥ Œº POST ‚â° @semWp_fix _ _ sR mG semWp Œ¥ s Œ≥ Œº POST.
  Proof. by unfold semWp; rewrite fixpoint_semWp_fix_eq. Qed.

  Definition t_max_steps {Œì1 Œì2 œÑ} :=
    CStore Œì1 -d> CStore Œì2 -d> Stm Œì1 œÑ -d> Stm Œì2 œÑ -d> RegStore -d> RegStore-d> Memory -d> Memory -d> iProp Œ£ -d> iProp Œ£.

  Definition max_steps_fix {Œì1 Œì2 œÑ} (max_steps : t_max_steps) : t_max_steps :=
    (Œª (Œ¥1 : CStore Œì1) (Œ¥2 : CStore Œì2) (s1 : Stm Œì1 œÑ) (s2 : Stm Œì2 œÑ) (Œ≥1 Œ≥2 : RegStore) (Œº1 Œº2 : Memory) (POST : iProp Œ£),
      match stm_to_val s1, stm_to_val s2 with
      | Some _, Some _ => POST
      | None  , Some _ =>  
          (‚àÄ Œ¥1' s1' Œ≥1' Œº1',
              ‚åú‚ü® Œ≥1, Œº1, Œ¥1, s1 ‚ü© ---> ‚ü® Œ≥1', Œº1', Œ¥1', s1' ‚ü©‚åù -‚àó
              ‚ñ∑ max_steps Œ¥1' Œ¥2 s1' s2 Œ≥1' Œ≥2 Œº1' Œº2 POST)
      | Some _, None   =>
          (‚àÄ Œ¥2' s2' Œ≥2' Œº2',
              ‚åú‚ü® Œ≥2, Œº2, Œ¥2, s2 ‚ü© ---> ‚ü® Œ≥2', Œº2', Œ¥2', s2' ‚ü©‚åù -‚àó
              ‚ñ∑ max_steps Œ¥1 Œ¥2' s1 s2' Œ≥1 Œ≥2' Œº1 Œº2' POST)
      | None  , None   =>
          (‚àÄ Œ¥1' Œ¥2' s1' s2' Œ≥1' Œ≥2' Œº1' Œº2',
              ‚åú‚ü® Œ≥1, Œº1, Œ¥1, s1 ‚ü© ---> ‚ü® Œ≥1', Œº1', Œ¥1', s1' ‚ü©‚åù -‚àó
              ‚åú‚ü® Œ≥2, Œº2, Œ¥2, s2 ‚ü© ---> ‚ü® Œ≥2', Œº2', Œ¥2', s2' ‚ü©‚åù -‚àó
              ‚ñ∑ max_steps Œ¥1' Œ¥2' s1' s2' Œ≥1' Œ≥2' Œº1' Œº2' POST)
      end)%I.
  Global Arguments max_steps_fix {_ _}%_ctx_scope {_} _ /.

  Global Instance max_steps_fix_Contractive {Œì1 Œì2 œÑ} :
    Contractive (@max_steps_fix Œì1 Œì2 œÑ).
  Proof. unfold t_max_steps; solve_contractive_more_arities. Qed.

  Definition max_steps {Œì1 Œì2 œÑ} : t_max_steps :=
    Œª (Œ¥1 : CStore Œì1) (Œ¥2 : CStore Œì2) (s1 : Stm Œì1 œÑ) (s2 : Stm Œì2 œÑ)
      (Œ≥1 Œ≥2 : RegStore) (Œº1 Œº2 : Memory) (POST : iProp Œ£),
      (fixpoint (@max_steps_fix Œì1 Œì2 œÑ)) Œ¥1 Œ¥2 s1 s2 Œ≥1 Œ≥2 Œº1 Œº2 POST.

  Lemma fixpoint_max_steps_fix_eq {Œì1 Œì2 œÑ} (Œ¥1 : CStore Œì1) (Œ¥2 : CStore Œì2)
    (s1 : Stm Œì1 œÑ) (s2 : Stm Œì2 œÑ) (Œ≥1 Œ≥2 : RegStore) (Œº1 Œº2 : Memory)
    (POST : iProp Œ£) :
    fixpoint max_steps_fix Œ¥1 Œ¥2 s1 s2 Œ≥1 Œ≥2 Œº1 Œº2 POST ‚â° max_steps_fix (fixpoint max_steps_fix) Œ¥1 Œ¥2 s1 s2 Œ≥1 Œ≥2 Œº1 Œº2 POST.
  Proof. exact: (fixpoint_unfold max_steps_fix Œ¥1 Œ¥2 s1 s2 Œ≥1 Œ≥2 Œº1 Œº2 POST). Qed.

  Lemma fixpoint_max_steps_eq {Œì1 Œì2 œÑ} (Œ¥1 : CStore Œì1) (Œ¥2 : CStore Œì2)
    (s1 : Stm Œì1 œÑ) (s2 : Stm Œì2 œÑ) (Œ≥1 Œ≥2 : RegStore) (Œº1 Œº2 : Memory)
    (POST : iProp Œ£) :
    max_steps Œ¥1 Œ¥2 s1 s2 Œ≥1 Œ≥2 Œº1 Œº2 POST ‚â° max_steps_fix max_steps Œ¥1 Œ¥2 s1 s2 Œ≥1 Œ≥2 Œº1 Œº2 POST.
  Proof. by unfold max_steps; rewrite fixpoint_max_steps_fix_eq. Qed.

  Definition semWp2 {Œì1 Œì2 œÑ} : Wp2 :=
    (Œª (Œ¥1 : CStore Œì1) (Œ¥2 : CStore Œì2)
         (s1 : Stm Œì1 œÑ) (s2 : Stm Œì2 œÑ)
         (POST : Post2 Œì1 Œì2 œÑ),
       (‚àÄ (Œ≥1 Œ≥2 : RegStore) (Œº1 Œº2 : Memory),
           ‚àÉ (POST1 : Post Œì1 œÑ) (POST2 : Post Œì2 œÑ),
           (@semWp _ _ sailRegGS2_sailRegGS_left mc_memGS_left Œ¥1 s1 Œ≥1 Œº1 POST1 ‚àó
            @semWp _ _ sailRegGS2_sailRegGS_right mc_memGS_right Œ¥2 s2 Œ≥2 Œº2 POST2 ‚àó
            (max_steps Œ¥1 Œ¥2 s1 s2 Œ≥1 Œ≥2 Œº1 Œº2
            (‚àÄ v1 Œ¥1 Œ≥1 Œº1 v2 Œ¥2 Œ≥2 Œº2, POST1 v1 Œ¥1 Œ≥1 Œº1 ‚àó POST2 v2 Œ¥2 Œ≥2 Œº2 -‚àó POST v1 Œ¥1 v2 Œ¥2)))))%I.
  End WithSailGS2.
End IrisBinaryWP.

Module IrisBinaryWPAsymmetricLaws
  (Import B     : Base)
  (Import SIG   : Signature B)
  (Import PROG  : Program B)
  (Import SEM   : Semantics B PROG)
  (Import IP    : IrisParameters B)
  (Import IB    : IrisBase2 B PROG SEM)
  (Import IPred : IrisPredicates2 B SIG PROG SEM IB).

  Module Export IWPP := IrisBinaryWPAsymmetric B SIG PROG SEM IP IB IPred.
  Module Export IWP := IrisBinaryWP B SIG PROG SEM IP IB IPred IWPP.

  Section WithSailGS2.
  Context `{sG : sailGS2 Œ£}.

  Import SmallStepNotations.

  Ltac discriminate_step :=
    match goal with
    | H: ‚ü® ?Œ≥, ?Œº, ?Œ¥, stm_fail ?œÑ ?m ‚ü© ---> ‚ü® ?Œ≥', ?Œº', ?Œ¥', ?s ‚ü© |- _ =>
        inversion H
    | H: ‚ü® ?Œ≥, ?Œº, ?Œ¥, stm_val ?œÑ ?v ‚ü© ---> ‚ü® ?Œ≥', ?Œº', ?Œ¥', ?s ‚ü© |- _ =>
        inversion H
    end.

  Ltac close_later H :=
    iMod (fupd_mask_subseteq empty) as H; first set_solver.

  Ltac stm_val_fail_stuck :=
    repeat match goal with
    | H: ‚ü® ?Œ≥, ?Œº, ?Œ¥, ?s ‚ü© ---> ‚ü® ?Œ≥', ?Œº', ?Œ¥', ?s' ‚ü©
      |- context[stm_to_val ?s] => rewrite (stm_val_stuck H)
    | H: ‚ü® ?Œ≥, ?Œº, ?Œ¥, ?s ‚ü© ---> ‚ü® ?Œ≥', ?Œº', ?Œ¥', ?s' ‚ü©
      |- context[stm_to_fail ?s] => rewrite (stm_fail_stuck H)
    end.

  Axiom step_deterministic : forall {Œì œÑ} {Œ≥ : RegStore} {Œº : Memory} {Œ¥ : CStore Œì}
    {s : Stm Œì œÑ},
    ‚àÄ {Œ≥1 Œº1 Œ¥1 s1 Œ≥2 Œº2 Œ¥2 s2},
      ‚ü® Œ≥, Œº, Œ¥, s ‚ü© ---> ‚ü® Œ≥1, Œº1, Œ¥1, s1 ‚ü© ->
      ‚ü® Œ≥, Œº, Œ¥, s ‚ü© ---> ‚ü® Œ≥2, Œº2, Œ¥2, s2 ‚ü© ->
      Œ≥1 = Œ≥2 ‚àß Œº1 = Œº2 ‚àß Œ¥1 = Œ¥2 ‚àß s1 = s2.

  Lemma semWp_mono [Œì œÑ] {sR mG} (s : Stm Œì œÑ) (Q1 Q2 : Post Œì œÑ) (Œ¥ : CStore Œì)
    (Œ≥ : RegStore) (Œº : Memory) :
    ‚ä¢ @semWp _ _ _ sR mG Œ¥ s Œ≥ Œº Q1 -‚àó (‚àÄ v Œ¥ Œ≥ Œº, Q1 v Œ¥ Œ≥ Œº -‚àó Q2 v Œ¥ Œ≥ Œº) -‚àó @semWp Œ£ _ _ sR mG Œ¥ s Œ≥ Œº Q2.
  Proof.
    iIntros "H HQ".
    iL√∂b as "IH" forall (Œ¥ s Œ≥ Œº).
    rewrite ?fixpoint_semWp_eq; cbn.
    case_match eqn:Esv.
    - by iApply "HQ".
    - iIntros (* (? ?) *) "Hres".
      iIntros (? ? ? ?) "Hs".
      iSpecialize ("H" with "Hres Hs").
      iDestruct "H" as "($ & H)".
      iIntros "!>".
      iApply ("IH" with "H HQ").
  Qed.

  Lemma max_steps_mono {Œì1 Œì2 œÑ} (Œ¥1 : CStore Œì1) (Œ¥2 : CStore Œì2)
    (s1 : Stm Œì1 œÑ) (s2 : Stm Œì2 œÑ) (Œ≥1 Œ≥2 : RegStore) (Œº1 Œº2 : Memory)
    (POST1 POST2 : iProp Œ£) :
    max_steps Œ¥1 Œ¥2 s1 s2 Œ≥1 Œ≥2 Œº1 Œº2 POST1 -‚àó
    (POST1 -‚àó POST2) -‚àó
    max_steps Œ¥1 Œ¥2 s1 s2 Œ≥1 Œ≥2 Œº1 Œº2 POST2.
  Proof.
    iL√∂b as "IH" forall (Œ¥1 Œ¥2 s1 s2 Œ≥1 Œ≥2 Œº1 Œº2).
    iIntros "H HPOST".
    destruct (stm_to_val s1) eqn:Es1v, (stm_to_val s2) eqn:Es2v;
      rewrite ?fixpoint_max_steps_eq /max_steps_fix ?Es1v ?Es2v.
    - iApply ("HPOST" with "H").
    - iIntros (? ? ? ? Hs1).
      iSpecialize ("H" with "[]"); first eauto.
      iModIntro.
      iApply ("IH" with "H HPOST").
    - iIntros (? ? ? ? Hs2).
      iSpecialize ("H" with "[]"); first eauto.
      iModIntro.
      iApply ("IH" with "H HPOST").
    - iIntros (? ? ? ? ? ? ? ? Hs1 Hs2).
      iSpecialize ("H" with "[] []"); [eauto|eauto|].
      iModIntro.
      iApply ("IH" with "H HPOST").
  Qed.

  Lemma max_steps_vals {Œì1 Œì2 œÑ} (Œ¥1 : CStore Œì1) (Œ¥2 : CStore Œì2)
    (v1 v2 : Val œÑ) (Œ≥1 Œ≥2 : RegStore) (Œº1 Œº2 : Memory) (POST : iProp Œ£) :
    max_steps Œ¥1 Œ¥2 (stm_val œÑ v1) (stm_val œÑ v2) Œ≥1 Œ≥2 Œº1 Œº2 POST ‚ä£‚ä¢ POST.
  Proof. rewrite fixpoint_max_steps_eq; by cbn. Qed.

  Lemma max_steps_steps {Œì1 Œì2 œÑ} (Œ¥1 : CStore Œì1) (Œ¥2 : CStore Œì2)
    (s1 : Stm Œì1 œÑ) (s2 : Stm Œì2 œÑ) (Œ≥1 Œ≥2 : RegStore) (Œº1 Œº2 : Memory)
    (POST : iProp Œ£) :
    ‚àÄ Œ¥1' Œ¥2' s1' s2' Œ≥1' Œ≥2' Œº1' Œº2',
      ‚ü® Œ≥1, Œº1, Œ¥1, s1 ‚ü© ---> ‚ü® Œ≥1', Œº1', Œ¥1', s1' ‚ü© ->
      ‚ü® Œ≥2, Œº2, Œ¥2, s2 ‚ü© ---> ‚ü® Œ≥2', Œº2', Œ¥2', s2' ‚ü© ->
      max_steps Œ¥1 Œ¥2 s1 s2 Œ≥1 Œ≥2 Œº1 Œº2 POST ‚ä¢
      ‚ñ∑ max_steps Œ¥1' Œ¥2' s1' s2' Œ≥1' Œ≥2' Œº1' Œº2' POST.
  Proof.
    iIntros (Œ¥1' Œ¥2' s1' s2' Œ≥1' Œ≥2' Œº1' Œº2' Hs1 Hs2) "H".
    rewrite fixpoint_max_steps_eq; cbn.
    stm_val_fail_stuck.
    now iSpecialize ("H" with "[] []"); [eauto|eauto|].
  Qed.

  Lemma semWp2_mono [Œì1 Œì2 œÑ] (s1 : Stm Œì1 œÑ) (s2 : Stm Œì2 œÑ)
    (Q1 Q2 : Post2 Œì1 Œì2 œÑ) (Œ¥1 : CStore Œì1) (Œ¥2 : CStore Œì2) :
    ‚ä¢ semWp2 Œ¥1 Œ¥2 s1 s2 Q1 -‚àó (‚àÄ v1 Œ¥1 v2 Œ¥2, Q1 v1 Œ¥1 v2 Œ¥2 -‚àó Q2 v1 Œ¥1 v2 Œ¥2) -‚àó semWp2 Œ¥1 Œ¥2 s1 s2 Q2.
  Proof.
    unfold semWp2.
    (* iIntros "(%POST1 & %POST2 & H) HQ". *)
    iIntros "H HQ". iIntros (Œ≥1 Œ≥2 Œº1 Œº2).
    iDestruct ("H" $! Œ≥1 Œ≥2 Œº1 Œº2) as "(%POST1 & %POST2 & H)".
    iExists POST1, POST2.
    iDestruct "H" as "($ & $ & H)".
    iApply (max_steps_mono with "H").
    iIntros "H".
    iIntros (? ? ? ? ? ? ? ?) "HPOST".
    iSpecialize ("H" with "HPOST").
    iApply ("HQ" with "H").
  Qed.

  Lemma semWp_val {Œì œÑ sR mG} (v : Val œÑ) (Q : Post Œì œÑ) :
    forall Œ¥ Œ≥ Œº,
      @semWp Œ£ _ _ sR mG Œ¥ (stm_val œÑ v) Œ≥ Œº Q ‚ä£‚ä¢ Q v Œ¥ Œ≥ Œº.
  Proof.
    iIntros (Œ¥ Œ≥ Œº).
    iSplit; iIntros "H";
      rewrite fixpoint_semWp_eq; cbn; auto.
  Qed.

  Lemma semWp2_val_1 {Œì1 Œì2 œÑ} (v1 : Val œÑ) (v2 : Val œÑ) (Q : Post2 Œì1 Œì2 œÑ) :
    forall Œ¥1 Œ¥2,
      Q v1 Œ¥1 v2 Œ¥2 ‚ä¢ semWp2 Œ¥1 Œ¥2 (stm_val œÑ v1) (stm_val œÑ v2) Q.
  Proof.
    iIntros (Œ¥1 Œ¥2) "HQ".
    rewrite /semWp2.
    iIntros (Œ≥1 Œ≥2 Œº1 Œº2).
    setoid_rewrite semWp_val.
    iExists (Œª v' Œ¥' Œ≥' Œº', ‚åúv' = v1‚åù ‚àó ‚åúŒ¥' = Œ¥1‚åù ‚àó ‚åúŒ≥' = Œ≥1‚åù ‚àó ‚åúŒº' = Œº1‚åù)%I.
    iExists (Œª v' Œ¥' Œ≥' Œº', ‚åúv' = v2‚åù ‚àó ‚åúŒ¥' = Œ¥2‚åù ‚àó ‚åúŒ≥' = Œ≥2‚åù ‚àó ‚åúŒº' = Œº2‚åù)%I.
    iSplitR; first auto. iSplitR; first auto.
    rewrite max_steps_vals.
    iIntros (? ? ? ? ? ? ? ?) "((-> & -> & -> & ->) & -> & -> & -> & ->)".
    now iFrame "HQ".
  Qed.

  (* TODO: bit annoying with the mem, regstore, but required for one direction... Seems odd, solve it properly. *)
  Lemma semWp2_val {Œì1 Œì2 œÑ} (v1 : Val œÑ) (v2 : Val œÑ) (Q : Post2 Œì1 Œì2 œÑ) :
    forall Œ¥1 Œ¥2 (Œ≥1 Œ≥2 : RegStore) (Œº1 Œº2 : Memory),
      (* (reg_inv2 _ Œ≥1 Œ≥2 ‚àó mem_inv2 _ Œº1 Œº2) ‚àó *) semWp2 Œ¥1 Œ¥2 (stm_val œÑ v1) (stm_val œÑ v2) Q
      ‚ä£‚ä¢ (* (reg_inv2 _ Œ≥1 Œ≥2 ‚àó mem_inv2 _ Œº1 Œº2) ‚àó *) Q v1 Œ¥1 v2 Œ¥2.
  Proof.
    iIntros (Œ¥1 Œ¥2 Œ≥1 Œ≥2 Œº1 Œº2).
    rewrite /semWp2.
    iSplit; iIntros "H".
    - iSpecialize ("H" $! Œ≥1 Œ≥2 Œº1 Œº2).
      setoid_rewrite semWp_val.
      iDestruct "H" as "(%POST1 & %POST2 & Hl & Hr & H)".
      rewrite max_steps_vals.
      iSpecialize ("H" with "[$Hl $Hr]").
      iFrame "H".
    - now iApply semWp2_val_1.
  Qed.

  Lemma semWp2_step_fupd {Œì1 Œì2 œÑ} (Œ¥A : CStore Œì1) (Œ¥B : CStore Œì2)
    (eA : Stm Œì1 œÑ) (eB : Stm Œì2 œÑ) (P :iProp Œ£) Œ¶ : 
    to_val {| conf_stm := eA; conf_store := Œ¥A |} = None ->
    to_val {| conf_stm := eB; conf_store := Œ¥B |} = None ->
    P -‚àó
    semWp2 Œ¥A Œ¥B eA eB (Œª v1 Œ¥A v2 Œ¥B, P -‚àó Œ¶ v1 Œ¥A v2 Œ¥B) -‚àó
    semWp2 Œ¥A Œ¥B eA eB Œ¶.
  Proof.
    rewrite /semWp2 ?fixpoint_semWp_eq; cbn.
    (* iIntros (HeA HeB) "HP (%POST1 & %POST2 & H)". *)
    iIntros (HeA HeB) "HP H".
    iIntros (Œ≥1 Œ≥2 Œº1 Œº2). iDestruct ("H" $! Œ≥1 Œ≥2 Œº1 Œº2) as "(%POST1 & %POST2 & H)".
    iExists POST1, POST2.
    iDestruct "H" as "($ & $ & H)".
    iApply (max_steps_mono with "H").
    iIntros "H".
    iIntros (? ? ? ? ? ? ? ? ) "HPs".
    iSpecialize ("H" with "HPs").
    iApply ("H" with "HP").
  Qed.

  (* TODO: no longer hold with updated defs *)
  Lemma semWp_not_stuck {Œì œÑ sR mG} (s : Stm Œì œÑ) (Œ¥ : CStore Œì) (Œ≥ : RegStore) (Œº : Memory) :
    ‚ä¢ @semWp Œ£ _ _ sR mG Œ¥ s Œ≥ Œº (Œª v' Œ¥' Œ≥' Œº', ‚àÄ Œ≥ Œº, ‚àÉ Œ≥' Œº', ‚åú‚ü® Œ≥, Œº, Œ¥, s ‚ü© --->* ‚ü® Œ≥', Œº', Œ¥', stm_val œÑ v' ‚ü©‚åù).
  Proof.
    (* iL√∂b as "IH" forall (Œ¥ s (* Œ≥ Œº *)). *)
    (* destruct (stm_to_val s) eqn:Esv. *)
    (* - destruct s; try discriminate; inversion Esv; subst. *)
    (*   rewrite semWp_val. iPureIntro. intros Œ≥. intros Œº. exists Œ≥, Œº. apply step_refl. *)
    (* - rewrite fixpoint_semWp_eq; cbn; rewrite Esv. *)
    (*   iIntros (Œ≥ Œº) "Hres". *)
    (*   iIntros (? ? ? ? Hs). iIntros "!>". *)
    (*   iSpecialize ("IH" $! Œ¥' s'). *)
  Admitted.

  Lemma semWp_exp {Œì œÑ sR mG} (Œ¶ : Post Œì œÑ) e Œ¥ Œ≥ Œº :
    Œ¶ (eval e Œ¥) Œ¥ Œ≥ Œº ‚ä¢ @semWp Œ£ _ _ sR mG Œ¥ (stm_exp e) Œ≥ Œº Œ¶.
  Proof.
    rewrite fixpoint_semWp_eq; cbn.
    iIntros "HŒ¶".
    iIntros (* (Œ≥ Œº) *) "Hres %s' %Œ¥' %Œ≥' %Œº' %Hs".
    destruct (smallinvstep Hs).
    rewrite semWp_val.
    now iFrame "HŒ¶ Hres".
  Qed.

  Lemma semWp2_exp {Œì œÑ} (Œ¶ : Post2 Œì Œì œÑ) eA eB Œ¥A Œ¥B :
    Œ¶ (eval eA Œ¥A) Œ¥A (eval eB Œ¥B) Œ¥B ‚ä¢ semWp2 Œ¥A Œ¥B (stm_exp eA) (stm_exp eB) Œ¶.
  Proof.
    rewrite /semWp2.
    iIntros "HŒ¶". iIntros (Œ≥1 Œ≥2 Œº1 Œº2).
    iExists (Œª v Œ¥ Œ≥ Œº, ‚åúv = eval eA Œ¥A‚åù ‚àó ‚åúŒ¥ = Œ¥A‚åù ‚àó ‚åúŒ≥ = Œ≥1‚åù ‚àó ‚åúŒº = Œº1‚åù)%I,
            (Œª v Œ¥ Œ≥ Œº, ‚åúv = eval eB Œ¥B‚åù ‚àó ‚åúŒ¥ = Œ¥B‚åù ‚àó ‚åúŒ≥ = Œ≥2‚åù ‚àó ‚åúŒº = Œº2‚åù)%I.
    repeat iSplitR.
    - now iApply semWp_exp.
    - now iApply semWp_exp.
    - rewrite fixpoint_max_steps_eq; cbn.
      iIntros (? ? ? ? ? ? ? ? HeA HeB).
      destruct (smallinvstep HeA), (smallinvstep HeB).
      rewrite max_steps_vals. iModIntro.
      iIntros (? ? ? ? ? ? ? ?) "((-> & -> & -> & ->) & -> & -> & -> & ->)".
      iFrame "HŒ¶".
  Qed.

  Lemma semWp_fail {Œì œÑ sR mG} (m : string) (Q : Post Œì œÑ) (Œ¥ : CStore Œì) (Œ≥ : RegStore) (Œº : Memory) :
    @semWp Œ£ _ _ sR mG Œ¥ (fail m)%exp Œ≥ Œº Q ‚ä£‚ä¢ True.
  Proof.
    iSplit; auto; iIntros "_".
    rewrite fixpoint_semWp_eq; cbn.
    iIntros (* (Œ≥ Œº) *) "Hres".
    iIntros (? ? ? ? Hfail).
    discriminate_step.
  Qed.

  Lemma semWp_bind {Œì œÑ œÉ sR mG} (s : Stm Œì œÉ) (k : Val œÉ -> Stm Œì œÑ)
                    (Q : Post Œì œÑ) (Œ¥ : CStore Œì) (Œ≥ : RegStore) (Œº : Memory) :
    @semWp _ _ _ sR mG Œ¥ s Œ≥ Œº (Œª v1 Œ¥1 Œ≥ Œº, @semWp _ _ _ sR mG Œ¥1 (k v1) Œ≥ Œº Q) ‚ä¢
    @semWp Œ£ _ _ sR mG Œ¥ (stm_bind s k) Œ≥ Œº Q.
  Proof.
    iIntros "H".
    iL√∂b as "IH" forall (Œ¥ s Œ≥ Œº).
    rewrite ?fixpoint_semWp_eq; cbn.
    iIntros (* (Œ≥ Œº) *) "Hres".
    iIntros (? ? ? ? Hs).
    destruct (smallinvstep Hs); cbn.
    - now iFrame "Hres H".
    - rewrite semWp_fail. now iFrame "Hres".
    - stm_val_fail_stuck.
      iSpecialize ("H" with "Hres []"); first eauto.
      iIntros "!>".
      iDestruct "H" as "($ & H)".
      iApply ("IH" with "H").
  Qed.

  Lemma not_final_expanded : ‚àÄ {Œì œÑ} {s : Stm Œì œÑ},
      ~ Final s -> stm_to_val s = None ‚àß stm_to_fail s = None.
  Proof.
    intros Œì œÑ s H; unfold Final in H; destruct s; auto; contradiction.
  Qed.

  Lemma stm_to_val_not_fail {Œì œÑ} {s : Stm Œì œÑ} :
    forall {v}, stm_to_val s = Some v -> stm_to_fail s = None.
  Proof. intros; by destruct s. Qed.

  Lemma semWp_step {Œì œÑ sR mG} {s : Stm Œì œÑ} (Œ¥ : CStore Œì) (Œ≥ : RegStore) (Œº : Memory) (POST : Post Œì œÑ) :
    ~ Final s ->
    (‚àÄ Œ≥ Œº Œ≥' Œº' Œ¥' s',
        (regs_inv Œ≥ ‚àó @mem_inv _ mG Œº) -‚àó
        ‚åú‚ü® Œ≥, Œº, Œ¥, s ‚ü© ---> ‚ü® Œ≥', Œº', Œ¥', s' ‚ü©‚åù -‚àó
         ‚ñ∑ ((regs_inv Œ≥' ‚àó @mem_inv _ mG Œº') ‚àó @semWp _ _ _ sR mG Œ¥' s' Œ≥' Œº' POST)) ‚ä¢
    @semWp Œ£ _ _ sR mG Œ¥ s Œ≥ Œº POST.
  Proof.
    iIntros (Hf).
    rewrite fixpoint_semWp_eq; cbn.
    destruct (not_final_expanded Hf) as (-> & _).
    iIntros "H Hres %s' %Œ¥' %Œ≥' %Œº' %Hs".
    iSpecialize ("H" with "Hres []"); first auto.
    done.
  Qed.

  Lemma semWp_frame_r {Œì œÑ sR mG} {s : Stm Œì œÑ} (Œ¥ : CStore Œì) (Œ≥ : RegStore) (Œº : Memory) (POST : Post Œì œÑ) {Q} :
    @semWp _ _ _ sR mG Œ¥ s Œ≥ Œº POST ‚àó Q ‚ä¢
    @semWp Œ£ _ _ sR mG Œ¥ s Œ≥ Œº (Œª v Œ¥ Œ≥ Œº, POST v Œ¥ Œ≥ Œº ‚àó Q).
  Proof.
    iL√∂b as "IH" forall (Œ¥ s Œ≥ Œº).
    rewrite ?fixpoint_semWp_eq; cbn.
    case_match eqn:Esv; first auto.
    iIntros "(H & HQ) Hres %s' %Œ¥' %Œ≥' %Œº' %Hs".
    iSpecialize ("H" with "Hres []"); first eauto.
    iIntros "!>".
    iDestruct "H" as "($ & H)".
    iApply ("IH" with "[$H $HQ]").
  Qed.

  Let sG_left : sailRegGS Œ£ := @sailRegGS2_sailRegGS_left _ (@sailGS2_regGS2 _ sG).
  Let sG_right : sailRegGS Œ£ := @sailRegGS2_sailRegGS_right _ (@sailGS2_regGS2 _ sG).
  Let mG_left := mc_memGS_left.
  Let mG_right := mc_memGS_right.

  Lemma semWp2_step_with_res_sep {Œì1 Œì2 œÑ} (s1 : Stm Œì1 œÑ) (s2 : Stm Œì2 œÑ)
                     (Œ¥1 : CStore Œì1) (Œ¥2 : CStore Œì2) (POST : Post2 Œì1 Œì2 œÑ) :
    ~ Final s1 ->
    ~ Final s2 ->
    (‚àÄ Œ≥1 Œ≥2 Œº1 Œº2 Œ≥1' Œ≥2' Œº1' Œº2' Œ¥1' Œ¥2' s1' s2',
      ‚åú‚ü® Œ≥1, Œº1, Œ¥1, s1 ‚ü© ---> ‚ü® Œ≥1', Œº1', Œ¥1', s1' ‚ü©‚åù -‚àó
      ‚åú‚ü® Œ≥2, Œº2, Œ¥2, s2 ‚ü© ---> ‚ü® Œ≥2', Œº2', Œ¥2', s2' ‚ü©‚åù -‚àó 
       ‚àÉ POST1 POST2,
       (@regs_inv _ sG_left Œ≥1 ‚àó @mem_inv _ mG_left Œº1 -‚àó ‚ñ∑ ((@regs_inv _ sG_left Œ≥1' ‚àó @mem_inv _ mG_left Œº1') ‚àó @semWp _ _ _ sG_left mG_left Œ¥1' s1' Œ≥1' Œº1' POST1))
       ‚àó (@regs_inv _ sG_right Œ≥2 ‚àó @mem_inv _ mG_right Œº2 -‚àó ‚ñ∑ ((@regs_inv _ sG_right Œ≥2' ‚àó @mem_inv _ mG_right Œº2') ‚àó @semWp _ _ _ sG_right mG_right Œ¥2' s2' Œ≥2' Œº2' POST2))
       ‚àó ‚ñ∑ max_steps Œ¥1' Œ¥2' s1' s2' Œ≥1' Œ≥2' Œº1' Œº2' (‚àÄ v1 Œ¥1 Œ≥1 Œº1 v2 Œ¥2 Œ≥2 Œº2, POST1 v1 Œ¥1 Œ≥1 Œº1 ‚àó POST2 v2 Œ¥2 Œ≥2 Œº2 -‚àó POST v1 Œ¥1 v2 Œ¥2)) -‚àó
      semWp2 Œ¥1 Œ¥2 s1 s2 POST.
  Proof.
    iIntros (Hs1 Hs2) "H".
    destruct (not_final_expanded Hs1) as (Hs1v & Hs1f).
    destruct (not_final_expanded Hs2) as (Hs2v & Hs2f).
    pose proof (progress s1) as Hstep1.
    pose proof (progress s2) as Hstep2.
    destruct Hstep1 as [|Hstep1]; first contradiction.
    destruct Hstep2 as [|Hstep2]; first contradiction.
    rewrite /(semWp2 Œ¥1).
    iIntros (Œ≥1 Œ≥2 Œº1 Œº2). iSpecialize ("H" $! Œ≥1 Œ≥2 Œº1 Œº2).
    destruct (Hstep1 Œ≥1 Œº1 Œ¥1) as (Œ≥1' & Œº1' & Œ¥1' & s1' & Hsteps1).
    destruct (Hstep2 Œ≥2 Œº2 Œ¥2) as (Œ≥2' & Œº2' & Œ¥2' & s2' & Hsteps2).
    iSpecialize ("H" with "[] []"); [eauto|eauto|].
    iDestruct "H" as "(%POST1 & %POST2 & Hwp1 & Hwp2 & H)".
    iExists POST1, POST2.
    iSplitL "Hwp1"; [|iSplitL "Hwp2"].
    - rewrite (fixpoint_semWp_eq Œ¥1); cbn; stm_val_fail_stuck.
      iIntros "Hres %s' %Œ¥' %Œ≥' %Œº' %Hsteps1'".
      destruct (step_deterministic Hsteps1 Hsteps1') as (<- & <- & <- & <-).
      iApply ("Hwp1" with "Hres").
    - rewrite (fixpoint_semWp_eq Œ¥2); cbn; stm_val_fail_stuck.
      iIntros "Hres %s' %Œ¥' %Œ≥' %Œº' %Hsteps2'".
      destruct (step_deterministic Hsteps2 Hsteps2') as (<- & <- & <- & <-).
      iApply ("Hwp2" with "Hres").
    - rewrite (fixpoint_max_steps_eq Œ¥1); cbn; stm_val_fail_stuck.
      iIntros (? ? ? ? ? ? ? ? Hsteps1' Hsteps2').
      destruct (step_deterministic Hsteps1 Hsteps1') as (<- & <- & <- & <-).
      destruct (step_deterministic Hsteps2 Hsteps2') as (<- & <- & <- & <-).
      iFrame "H".
  Qed.

  Lemma semWp2_val_r {Œì œÑ} (s1 : Stm Œì œÑ) (v2 : Val œÑ) (POST : Post2 Œì Œì œÑ)
                     (Œ¥1 Œ¥2 : CStore Œì) :
    (‚àÄ Œ≥1 Œ≥2 Œº1 Œº2,
      ‚àÉ (POST1 POST2 : Post Œì œÑ),
     @semWp _ _ _ sG_left mG_left Œ¥1 s1 Œ≥1 Œº1 POST1 ‚àó
     POST2 v2 Œ¥2 Œ≥2 Œº2 ‚àó
     max_steps Œ¥1 Œ¥2 s1 (stm_val œÑ v2) Œ≥1 Œ≥2 Œº1 Œº2
       (‚àÄ v1 Œ¥1 Œ≥1 Œº1 v2 Œ¥2 Œ≥2 Œº2, POST1 v1 Œ¥1 Œ≥1 Œº1 ‚àó POST2 v2 Œ¥2 Œ≥2 Œº2 -‚àó POST v1 Œ¥1 v2 Œ¥2)) -‚àó
    semWp2 Œ¥1 Œ¥2 s1 (stm_val œÑ v2) POST.
  Proof.
    iIntros "H".
    rewrite /(semWp2 Œ¥1).
    iIntros (Œ≥1 Œ≥2 Œº1 Œº2).
    iDestruct ("H" $! Œ≥1 Œ≥2 Œº1 Œº2) as "(%POST1 & %POST2 & Hwp & HPOST2 & H)".
    iExists POST1, POST2.
    iFrame "Hwp H".
    now rewrite semWp_val.
  Qed.

  Lemma semWp2_bind_l_alt {Œì œÑ œÉ} (s1 : Stm Œì œÉ) (s2 : Stm Œì œÑ) (k1 : Val œÉ ‚Üí Stm Œì œÑ)
    (POSTs : Post Œì œÉ) (POST : Post2 Œì Œì œÑ) (Œ¥1 Œ¥2 : CStore Œì) :
    (‚àÄ Œ≥1 Œº1, @semWp _ _ _ sG_left mG_left Œ¥1 s1 Œ≥1 Œº1 POSTs) -‚àó
    (‚àÄ v1 Œ¥1 Œ≥1 Œº1, POSTs v1 Œ¥1 Œ≥1 Œº1 -‚àó semWp2 Œ¥1 Œ¥2 (k1 v1) s2 POST) -‚àó
    semWp2 Œ¥1 Œ¥2 (stm_bind s1 k1) s2 POST.
  Proof.
    iL√∂b as "IH" forall (Œ¥1 s1 Œ¥2 s2).
    iIntros "Hwp H".
    destruct (stm_to_val s2) eqn:Es2v.
    - destruct s2; try discriminate; inversion Es2v; subst.
      iApply semWp2_val_r.
      iIntros (Œ≥1 Œ≥2 Œº1 Œº2).
      iSpecialize ("Hwp" $! Œ≥1 Œº1).
      pose proof (progress (stm_bind s1 k1)).
      destruct H as [H|H]; first contradiction.
      specialize (H Œ≥1 Œº1 Œ¥1).
      destruct H as (Œ≥1' & Œº1' & Œ¥1' & s1' & H).
      destruct (smallinvstep H).
      + rewrite semWp_val.
        iSpecialize ("H" with "Hwp").
        rewrite /(semWp2 Œ¥1).
        iDestruct ("H" $! Œ≥1 Œ≥2 Œº1 Œº2) as "(%POST1 & %POST2 & Hwp1 & Hwp2 & H)".
        iExists POST1, POST2.
        rewrite semWp_val. iFrame "Hwp2".
        iSplitL "Hwp1".
        { iApply semWp_bind. now rewrite semWp_val. }
        admit (* TODO: add lemma for max_steps, we get an additional later in the goal, which is fine *).
      + admit (* TODO: fail case *).
      + (* TODO: we can get the laters by ensuring each semWp takes the same nr of steps (similar to max_steps),
                 we can then pull the later "before" the ‚àÉ with bi.later_exist *)
        rewrite (fixpoint_semWp_eq Œ¥1 s); cbn; stm_val_fail_stuck.
        setoid_rewrite (fixpoint_semWp_eq Œ¥1 (stm_bind s k1)); cbn; stm_val_fail_stuck.
        (* NOTE: be clever with the existentials, maybe that'll help us make progress here *)
        (* NOTE: make the problem simpler, use free monad, no sep logic, ... *)
  Admitted.

  Lemma semWp2_bind_alt {Œì œÑ œÉ} (s1 s2 : Stm Œì œÉ) (k1 k2 : Val œÉ ‚Üí Stm Œì œÑ)
    (POSTs : Post2 Œì Œì œÉ) (POST : Post2 Œì Œì œÑ) (Œ¥1 Œ¥2 : CStore Œì) :
    semWp2 Œ¥1 Œ¥2 s1 s2 POSTs -‚àó
    (‚àÄ v1 Œ¥1 v2 Œ¥2, POSTs v1 Œ¥1 v2 Œ¥2 -‚àó semWp2 Œ¥1 Œ¥2 (k1 v1) (k2 v2) POST) -‚àó
    semWp2 Œ¥1 Œ¥2 (stm_bind s1 k1) (stm_bind s2 k2) POST.
  Proof.
    iL√∂b as "IH" forall (Œ¥1 Œ¥2 s1 s2).
    iIntros "Hs Hk".
    iApply semWp2_step_with_res_sep; [eauto|eauto|].
    iIntros (Œ≥1 Œ≥2 Œº1 Œº2 Œ≥1' Œ≥2' Œº1' Œº2' Œ¥1' Œ¥2' s1' s2' Hs1 Hs2).
    destruct (smallinvstep Hs1), (smallinvstep Hs2).
    - rewrite (semWp2_val _ _ _ _ _ Œ≥1 Œ≥2 Œº1 Œº2).
      iSpecialize ("Hk" with "Hs").
      rewrite /(semWp2 Œ¥1).
      iDestruct ("Hk" $! Œ≥1 Œ≥2 Œº1 Œº2) as "(%POST1 & %POST2 & Hwp1 & Hwp2 & H)".
      iExists POST1, POST2.
      iSplitL "Hwp1"; [|iSplitL "Hwp2"].
      + iIntros "$". iFrame "Hwp1".
      + iIntros "$". iFrame "Hwp2".
      + iFrame "H".
    - admit (* fail case *).
  Admitted.

  Lemma semWp2_bind {Œì œÑ œÉ} (s1 s2 : Stm Œì œÉ) (k1 k2 : Val œÉ ‚Üí Stm Œì œÑ)
    (POST : Post2 Œì Œì œÑ) (Œ¥1 Œ¥2 : CStore Œì) :
    semWp2 Œ¥1 Œ¥2 s1 s2 (fun v1 Œ¥12 v2 Œ¥22 => semWp2 Œ¥12 Œ¥22 (k1 v1) (k2 v2) POST) ‚ä¢
      semWp2 Œ¥1 Œ¥2 (stm_bind s1 k1) (stm_bind s2 k2) POST.
  Proof.
  Admitted.

  Lemma semWp2_block {Œì1 Œì2 œÑ Œî1 Œî2} (Œ¥Œî1 : CStore Œî1) (Œ¥Œî2 : CStore Œî2) (s1 : Stm (Œì1 ‚ñª‚ñª Œî1) œÑ) (s2 : Stm (Œì2 ‚ñª‚ñª Œî2) œÑ) :
    ‚ä¢ ‚àÄ (Q : Val œÑ ‚Üí CStore Œì1 ‚Üí Val œÑ ‚Üí CStore Œì2 ‚Üí iProp Œ£) (Œ¥1 : CStore Œì1) (Œ¥2 : CStore Œì2),
        semWp2 (Œ¥1 ‚ñ∫‚ñ∫ Œ¥Œî1) (Œ¥2 ‚ñ∫‚ñ∫ Œ¥Œî2) s1 s2 (fun v1 Œ¥21 v2 Œ¥22 => Q v1 (env.drop Œî1 Œ¥21) v2 (env.drop Œî2 Œ¥22)) -‚àó
        semWp2 Œ¥1 Œ¥2 (stm_block Œ¥Œî1 s1) (stm_block Œ¥Œî2 s2) Q.
  Proof.
  Admitted.

  Lemma semWp2_let {Œì œÑ x œÉ} (s1 s2 : Stm Œì œÉ) (k1 k2 : Stm (Œì ‚ñª x‚à∑œÉ) œÑ)
    (Q : Post2 Œì Œì œÑ) (Œ¥1 Œ¥2 : CStore Œì) :
    ‚ä¢ semWp2 Œ¥1 Œ¥2 s1 s2 (fun v1 Œ¥12 v2 Œ¥22 => semWp2 Œ¥12.[x‚à∑œÉ ‚Ü¶ v1] Œ¥22.[x‚à∑œÉ ‚Ü¶ v2] k1 k2 (fun v12 Œ¥13 v22 Œ¥23 => Q v12 (env.tail Œ¥13) v22 (env.tail Œ¥23)) ) -‚àó
        semWp2 Œ¥1 Œ¥2 (let: x ‚à∑ œÉ := s1 in k1)%exp (let: x ‚à∑ œÉ := s2 in k2)%exp Q.
  Proof.
  Admitted.

  Lemma semWp2_seq {Œì œÑ œÉ} (s1 s2 : Stm Œì œÉ) (k1 k2 : Stm Œì œÑ) :
    ‚ä¢ ‚àÄ (Q : Post2 Œì Œì œÑ) (Œ¥1 Œ¥2 : CStore Œì),
        semWp2 Œ¥1 Œ¥2 s1 s2 (fun v1 Œ¥21 v2 Œ¥22 => semWp2 Œ¥21 Œ¥22 k1 k2 Q) -‚àó semWp2 Œ¥1 Œ¥2 (s1;;k1)%exp (s2;;k2)%exp Q.
  Proof.
  Admitted.

  Lemma semWp2_assertk {Œì œÑ} (e11 e21 : Exp Œì ty.bool) (e12 e22 : Exp Œì ty.string) (k1 k2 : Stm Œì œÑ) :
    ‚ä¢ ‚àÄ (Q : Val œÑ ‚Üí CStore Œì ‚Üí Val œÑ ‚Üí CStore Œì ‚Üí iProp Œ£) (Œ¥1 Œ¥2 : CStore Œì),
        ‚åúeval e11 Œ¥1 = eval e21 Œ¥2‚åù -‚àó
        (‚åúeval e11 Œ¥1 = true‚åù ‚Üí ‚åúeval e21 Œ¥2 = true‚åù ‚Üí semWp2 Œ¥1 Œ¥2 k1 k2 Q) -‚àó
        semWp2 Œ¥1 Œ¥2 (stm_assertk e11 e12 k1) (stm_assertk e21 e22 k2) Q.
  Proof.
  Admitted.

  Lemma semWp2_read_register {Œì œÑ} (reg : ùëπùë¨ùëÆ œÑ) :
    ‚ä¢ ‚àÄ (Q : Val œÑ ‚Üí CStore Œì ‚Üí Val œÑ ‚Üí CStore Œì ‚Üí iProp Œ£) (Œ¥1 Œ¥2 : CStore Œì),
        (‚àÉ v1 v2 : Val œÑ, reg_pointsTo2 reg v1 v2 ‚àó (reg_pointsTo2 reg v1 v2 -‚àó Q v1 Œ¥1 v2 Œ¥2)) -‚àó
        semWp2 Œ¥1 Œ¥2 (stm_read_register reg) (stm_read_register reg) Q.
  Proof.
  Admitted.

  Lemma semWp2_write_register {Œì œÑ} (reg : ùëπùë¨ùëÆ œÑ) (e1 e2 : Exp Œì œÑ) :
    ‚ä¢ ‚àÄ (Q : Val œÑ ‚Üí CStore Œì ‚Üí Val œÑ ‚Üí CStore Œì ‚Üí iProp Œ£) (Œ¥1 Œ¥2 : CStore Œì),
        (‚àÉ v1 v2 : Val œÑ, reg_pointsTo2 reg v1 v2 ‚àó (reg_pointsTo2 reg (eval e1 Œ¥1) (eval e2 Œ¥2) -‚àó Q (eval e1 Œ¥1) Œ¥1 (eval e2 Œ¥2) Œ¥2)) -‚àó
        semWp2 Œ¥1 Œ¥2 (stm_write_register reg e1) (stm_write_register reg e2) Q.
  Proof.
  Admitted.

  (* TODO: notation for cstore update not working? (import env.notations doesn't solve it) Investigate and define lemma *)
  (* Lemma semWp2_assign {Œì œÑ x} (xInŒì : x‚à∑œÑ ‚àà Œì) (s1 s2 : Stm Œì œÑ) : *)
  (*   ‚ä¢ ‚àÄ (Q : Val œÑ ‚Üí CStore Œì ‚Üí Val œÑ ‚Üí CStore Œì ‚Üí iProp Œ£) (Œ¥1 Œ¥2 : CStore Œì), *)
  (*       semWp2 Œ¥1 Œ¥2 s1 s2 (Œª v1 Œ¥21 v2 Œ¥22, Q v1 (Œ¥21 ‚ü™ x ‚Ü¶ v1 ‚ü´) v2 (Œ¥22 ‚ü™ x ‚Ü¶ v2 ‚ü´)) -‚àó *)
  (*       semWp2 Œ¥1 Œ¥2 (stm_assign x s1) (stm_assign x s2) Q. *)
  (* Proof. *)
  (* Admitted. *)

  Lemma semWp2_pattern_match {Œì œÑ œÉ} (s1 s2 : Stm Œì œÉ) (pat : Pattern œÉ)
    (rhs1 rhs2 : ‚àÄ pc : PatternCase pat, Stm (Œì ‚ñª‚ñª PatternCaseCtx pc) œÑ) :
    ‚ä¢ ‚àÄ (Q : Val œÑ ‚Üí CStore Œì ‚Üí Val œÑ ‚Üí CStore Œì ‚Üí iProp Œ£) (Œ¥1 Œ¥2 : CStore Œì),
    semWp2 Œ¥1 Œ¥2 s1 s2
      (fun vœÉ1 Œ¥12 vœÉ2 Œ¥22 =>
         let (pc1,Œ¥pc1) := pattern_match_val pat vœÉ1 in
         let (pc2,Œ¥pc2) := pattern_match_val pat vœÉ2 in
         semWp2 (Œ¥12 ‚ñ∫‚ñ∫ Œ¥pc1) (Œ¥22 ‚ñ∫‚ñ∫ Œ¥pc2) (rhs1 pc1) (rhs2 pc2)
           (fun vœÑ1 Œ¥21 vœÑ2 Œ¥22 => Q vœÑ1 (env.drop (PatternCaseCtx pc1) Œ¥21) vœÑ2 (env.drop (PatternCaseCtx pc2) Œ¥22))
           ) -‚àó
    semWp2 Œ¥1 Œ¥2 (stm_pattern_match s1 pat rhs1) (stm_pattern_match s2 pat rhs2) Q.
  Proof.
  Admitted.

  Lemma semWp2_foreign {Œì Œî œÑ} {f1 f2 : ùë≠ùëø Œî œÑ} {es1 es2 : NamedEnv (Exp Œì) Œî} {Q Œ¥1 Œ¥2} :
    ‚ä¢ (‚àÄ Œ≥1 Œ≥2 Œº1 Œº2,
          (regs_inv2 Œ≥1 Œ≥2 ‚àó mem_inv2 _ Œº1 Œº2)
          ={‚ä§,‚àÖ}=‚àó
      (‚àÄ res1 Œ≥1' Œº1' res2 Œ≥2' Œº2',
        ‚åú ForeignCall f1 (evals es1 Œ¥1) res1 Œ≥1 Œ≥1' Œº1 Œº1' ‚åù
        ‚àó ‚åú ForeignCall f2 (evals es2 Œ¥2) res2 Œ≥2 Œ≥2' Œº2 Œº2' ‚åù
        ={‚àÖ}‚ñ∑=‚àó
         |={‚àÖ,‚ä§}=>
         (regs_inv2 Œ≥1' Œ≥2' ‚àó mem_inv2 _ Œº1' Œº2') ‚àó
                    semWp2 Œ¥1 Œ¥2 (match res1 with inr v => stm_val _ v
                                             | inl s => stm_fail _ s
                                  end)
                    (match res2 with inr v => stm_val _ v
                                | inl s => stm_fail _ s
                     end)
                    Q)) -‚àó
      semWp2 Œ¥1 Œ¥2 (stm_foreign f1 es1) (stm_foreign f2 es2) Q.
  Proof.
  Admitted.

  Lemma semWp2_debugk {Œì œÑ} (s1 s2 : Stm Œì œÑ) :
    ‚ä¢ ‚àÄ Q Œ¥1 Œ¥2, semWp2 Œ¥1 Œ¥2 s1 s2 Q -‚àó semWp2 Œ¥1 Œ¥2 (stm_debugk s1) (stm_debugk s2) Q.
  Proof.
  Admitted.

  Lemma semWp2_lemmak {Œì œÑ} {Œî} (l1 l2 : ùë≥ Œî) (es1 es2 : NamedEnv (Exp Œì) Œî) (s1 s2 : Stm Œì œÑ) :
    ‚ä¢ ‚àÄ Q Œ¥1 Œ¥2, semWp2 Œ¥1 Œ¥2 s1 s2 Q -‚àó semWp2 Œ¥1 Œ¥2 (stm_lemmak l1 es1 s1) (stm_lemmak l2 es2 s2) Q.
  Proof.
  Admitted.
  End WithSailGS2.
End IrisBinaryWPAsymmetricLaws.

Module Type IrisSignatureRules2
  (Import B     : Base)
  (Import SIG   : Signature B)
  (Import PROG  : Program B)
  (Import SEM   : Semantics B PROG)
  (Import IB    : IrisBase2 B PROG SEM)
  (Import IPred : IrisPredicates2 B SIG PROG SEM IB).

  (* We fix the binary wp to the asymmetric one. A different one would have
     different laws. *)
  Module Export IWPLaws := IrisBinaryWPAsymmetricLaws B SIG PROG SEM IB IPred.

  Section WithSailGS2.
  Context `{sG : sailGS2 Œ£}.

Section Soundness.

  Definition semTriple {Œì œÑ} (Œ¥ : CStore Œì)
             (PRE : iProp Œ£) (s : Stm Œì œÑ) (POST : Val œÑ -> CStore Œì -> iProp Œ£) : iProp Œ£ :=
    PRE -‚àó
           semWp2 Œ¥ Œ¥ s s (fun v1 Œ¥1 v2 Œ¥2 => ‚åú v1 = v2 ‚åù ‚àó ‚åú Œ¥1 = Œ¥2 ‚åù ‚àó POST v1 Œ¥1)%I.
  (* always modality needed? perhaps not because sail not higher-order? *)
  Global Arguments semTriple {Œì} {œÑ} Œ¥ PRE%_I s%_exp POST%_I.

  Definition ValidLemma {Œî} (lem : Lemma Œî) : Prop :=
    match lem with
      {| lemma_logic_variables := Œ£;
         lemma_patterns        := Œ∏Œî;
         lemma_precondition    := req;
         lemma_postcondition   := ens;
      |} =>
      forall (Œπ : Valuation Œ£),
        ‚ä¢ asn.interpret req Œπ -‚àó
          asn.interpret ens Œπ
    end.

  Lemma iris_rule_consequence {Œì œÉ} {Œ¥ : CStore Œì}
        {P P'} {Q Q' : Val œÉ -> CStore Œì -> iProp Œ£} {s : Stm Œì œÉ} :
        (P ‚ä¢ P') -> (forall v Œ¥', Q' v Œ¥' ‚ä¢ Q v Œ¥') ->
        semTriple Œ¥ P' s Q' -‚àó semTriple Œ¥ P s Q.
  Proof.
    iIntros (PP QQ) "Htriple P".
    iApply (semWp2_mono with "[Htriple P]").
    - iApply "Htriple".
      now iApply PP.
    - iIntros (v1 Œ¥1 v2 Œ¥2) "(-> & -> & Q')".
      iPoseProof (QQ with "Q'") as "Q"; auto.
  Qed.

  Lemma iris_rule_frame {Œì œÉ} {Œ¥ : CStore Œì}
        (R P : iProp Œ£) (Q : Val œÉ -> CStore Œì -> iProp Œ£) (s : Stm Œì œÉ) :
        (‚ä¢ semTriple Œ¥ P s Q -‚àó semTriple Œ¥ (R ‚àó P) s (fun v Œ¥' => R ‚àó Q v Œ¥'))%I.
  Proof.
    iIntros "Htriple [HR HP]".
    iSpecialize ("Htriple" with "HP").
  (*   iPoseProof (semWp2_frame_l with "[HR Htriple]") as "Hwp". *)
  (*   { iSplitL "HR". iExact "HR". iExact "Htriple". } *)
  (*   iApply (semWp2_mono with "Hwp"). *)
  (*   iIntros (? ? ? ?) "($ & $ & $ & $)". *)
  (* Qed. *)
  Admitted.

  Lemma iris_rule_pull {œÉ Œì} (Œ¥ : CStore Œì) (s : Stm Œì œÉ)
        (P : iProp Œ£) (Q : Prop) (R : Val œÉ -> CStore Œì -> iProp Œ£) :
        (‚ä¢ (‚åú Q ‚åù ‚Üí semTriple Œ¥ P s R) -‚àó semTriple Œ¥ (P ‚àß bi_pure Q) s R).
  Proof.
    iIntros "QP [P %]".
    by iApply "QP".
  Qed.

  Lemma iris_rule_exist {œÉ Œì} (Œ¥ : CStore Œì)
        (s : Stm Œì œÉ) {A : Type} {P : A -> iProp Œ£}
        {Q :  Val œÉ -> CStore Œì -> iProp Œ£} :
        ‚ä¢ ((‚àÄ x, semTriple Œ¥ (P x) s Q) -‚àó semTriple Œ¥ (‚àÉ x, P x) s Q).
  Proof.
    iIntros "Htriple [% P]".
    by iApply "Htriple".
  Qed.

  Lemma iris_rule_stm_val {Œì} (Œ¥ : CStore Œì)
        {œÑ : Ty} {v : Val œÑ}
        {P : iProp Œ£} {Q : Val œÑ -> CStore Œì -> iProp Œ£} :
        ‚ä¢ ((P -‚àó Q v Œ¥)%I -‚àó semTriple Œ¥ P (stm_val œÑ v) Q).
  Proof.
    iIntros "PQ P".
    iApply semWp2_val_1.
    iSpecialize ("PQ" with "P").
    by iFrame.
  Qed.

  Lemma iris_rule_stm_exp {Œì} (Œ¥ : CStore Œì)
        {œÑ : Ty} {e : Exp Œì œÑ}
        {P : iProp Œ£} {Q : Val œÑ -> CStore Œì -> iProp Œ£} :
        ‚ä¢ ((P -‚àó Q (eval e Œ¥) Œ¥) -‚àó semTriple Œ¥ P (stm_exp e) Q).
  Proof.
    iIntros "PQ P".
    iApply semWp2_exp.
    iSpecialize ("PQ" with "P").
    now iFrame.
  Qed.

  Lemma iris_rule_stm_let {Œì} (Œ¥ : CStore Œì)
        (x : PVar) (œÉ œÑ : Ty) (s : Stm Œì œÉ) (k : Stm (Œì ‚ñª x‚à∑œÉ) œÑ)
        (P : iProp Œ£) (Q : Val œÉ -> CStore Œì -> iProp Œ£)
        (R : Val œÑ -> CStore Œì -> iProp Œ£) :
        ‚ä¢ (semTriple Œ¥ P s Q -‚àó
                     (‚àÄ (v : Val œÉ) (Œ¥' : CStore Œì),
                         semTriple (env.snoc Œ¥' (x‚à∑œÉ) v) (Q v Œ¥') k (fun v Œ¥'' => R v (env.tail Œ¥'')) ) -‚àó
                     semTriple Œ¥ P (let: x := s in k) R).
  Proof.
    iIntros "Hs Hk P".
    iApply semWp2_let.
    iSpecialize ("Hs" with "P").
    iApply (semWp2_mono with "Hs").
    iIntros (v1 Œ¥1 v2 Œ¥2) "(<- & <- & Q)".
    iSpecialize ("Hk" $! v1 Œ¥1 with "Q").
    iApply (semWp2_mono with "Hk").
    iIntros (? ? ? ?) "(<- & <- & R)".
    by iFrame"R".
  Qed.

  Lemma iris_rule_stm_block {Œì} (Œ¥ : CStore Œì)
        (Œî : PCtx) (Œ¥Œî : CStore Œî)
        (œÑ : Ty) (k : Stm (Œì ‚ñª‚ñª Œî) œÑ)
        (P : iProp Œ£) (R : Val œÑ -> CStore Œì -> iProp Œ£) :
        ‚ä¢ (semTriple (Œ¥ ‚ñ∫‚ñ∫ Œ¥Œî) P k (fun v Œ¥'' => R v (env.drop Œî Œ¥'')) -‚àó
                   semTriple Œ¥ P (stm_block Œ¥Œî k) R).
  Proof.
  Admitted.

  Lemma iris_rule_stm_seq {Œì} (Œ¥ : CStore Œì)
        (œÑ : Ty) (s1 : Stm Œì œÑ) (œÉ : Ty) (s2 : Stm Œì œÉ)
        (P : iProp Œ£) (Q : CStore Œì -> iProp Œ£) (R : Val œÉ -> CStore Œì -> iProp Œ£) :
    ‚ä¢ (semTriple Œ¥ P s1 (fun _ => Q) -‚àó
                 (‚àÄ Œ¥', semTriple Œ¥' (Q Œ¥') s2 R) -‚àó
                 semTriple Œ¥ P (s1 ;; s2) R).
  Proof.
  Admitted.

  Lemma iris_rule_stm_assertk {Œì œÑ} (Œ¥ : CStore Œì)
        (e1 : Exp Œì ty.bool) (e2 : Exp Œì ty.string) (k : Stm Œì œÑ)
                      (P : iProp Œ£) (Q : Val œÑ -> CStore Œì -> iProp Œ£) :
    ‚ä¢ (‚åú eval e1 Œ¥ = true ‚åù ‚Üí semTriple Œ¥ P k Q) -‚àó
      semTriple Œ¥ P (stm_assertk e1 e2 k) Q.
  Proof.
  Admitted.

  Lemma iris_rule_stm_fail {Œì} (Œ¥ : CStore Œì)
        (œÑ : Ty) (s : Val ty.string) :
        forall (Q : Val œÑ -> CStore Œì -> iProp Œ£),
          ‚ä¢ semTriple Œ¥ True (stm_fail œÑ s) Q.
  Proof.
  Admitted.

  Lemma iris_rule_stm_read_register {Œì} (Œ¥ : CStore Œì)
        {œÉ : Ty} (r : ùëπùë¨ùëÆ œÉ) (v : Val œÉ) :
        ‚ä¢ (semTriple Œ¥ (lptsreg r v) (stm_read_register r) (fun v' Œ¥' => ‚åú Œ¥' = Œ¥ ‚åù ‚àß ‚åú v' = v ‚åù ‚àß lptsreg r v)).
  Proof.
  Admitted.

  Lemma iris_rule_stm_write_register {Œì} (Œ¥ : CStore Œì)
        {œÉ : Ty} (r : ùëπùë¨ùëÆ œÉ) (w : Exp Œì œÉ)
                              (Q : Val œÉ -> CStore Œì -> iProp Œ£)
                              (v : Val œÉ) :
        ‚ä¢ semTriple Œ¥ (lptsreg r v) (stm_write_register r w)
                  (fun v' Œ¥' => ‚åúŒ¥' = Œ¥‚åù ‚àß ‚åúv' = eval w Œ¥‚åù ‚àß lptsreg r v').
  Proof.
  Admitted.

  Lemma iris_rule_stm_assign {Œì} (Œ¥ : CStore Œì)
        (x : PVar) (œÉ : Ty) (xIn : x‚à∑œÉ ‚àà Œì) (s : Stm Œì œÉ)
        (P : iProp Œ£) (R : Val œÉ -> CStore Œì -> iProp Œ£) :
        ‚ä¢ (semTriple Œ¥ P s (fun v Œ¥' => R v (@env.update _ _ _ Œ¥' (x‚à∑_) _ v)) -‚àó
           semTriple Œ¥ P (stm_assign x s) R).
  Proof.
  Admitted.

  Lemma iris_rule_stm_bind {Œì} (Œ¥ : CStore Œì)
        {œÉ œÑ : Ty} (s : Stm Œì œÉ) (k : Val œÉ -> Stm Œì œÑ)
        (P : iProp Œ£) (Q : Val œÉ -> CStore Œì -> iProp Œ£)
        (R : Val œÑ -> CStore Œì -> iProp Œ£) :
        ‚ä¢ (semTriple Œ¥ P s Q -‚àó
           (‚àÄ (v__œÉ : Val œÉ) (Œ¥' : CStore Œì),
               semTriple Œ¥' (Q v__œÉ Œ¥') (k v__œÉ) R) -‚àó
           semTriple Œ¥ P (stm_bind s k) R).
  Proof.
    iIntros "trips tripk P".
    iSpecialize ("trips" with "P").
    iApply semWp2_bind.
    iApply (semWp2_mono with "trips").
    iIntros (v1 Œ¥1 v2 Œ¥2) "(<- & <- & HR)".
    now iApply ("tripk" with "HR").
  Qed.

  Lemma iris_rule_stm_call_inline_later
    {Œì} (Œ¥Œì : CStore Œì)
    {Œî œÉ} (f : ùë≠ Œî œÉ) (es : NamedEnv (Exp Œì) Œî)
    (P : iProp Œ£) (Q : Val œÉ -> CStore Œì -> iProp Œ£) :
    ‚ä¢ ‚ñ∑ semTriple (evals es Œ¥Œì) P (FunDef f) (fun v _ => Q v Œ¥Œì) -‚àó
      semTriple Œ¥Œì P (stm_call f es) Q.
  Proof.
  Admitted.

  Lemma iris_rule_stm_call_inline
    {Œì} (Œ¥Œì : CStore Œì)
    {Œî œÉ} (f : ùë≠ Œî œÉ) (es : NamedEnv (Exp Œì) Œî)
    (P : iProp Œ£) (Q : Val œÉ -> CStore Œì -> iProp Œ£) :
    ‚ä¢ semTriple (evals es Œ¥Œì) P (FunDef f) (fun v _ => Q v Œ¥Œì) -‚àó
      semTriple Œ¥Œì P (stm_call f es) Q.
  Proof.
  Admitted.

  Lemma iris_rule_stm_debugk
    {Œì œÑ} (Œ¥ : CStore Œì) (k : Stm Œì œÑ)
    (P : iProp Œ£) (Q : Val œÑ -> CStore Œì -> iProp Œ£) :
    ‚ä¢ (semTriple Œ¥ P k Q -‚àó
       semTriple Œ¥ P (stm_debugk k) Q).
  Proof.
  Admitted.

  Lemma iris_rule_noop {Œì œÉ} {Œ¥ : CStore Œì}
        {P} {Q : Val œÉ -> CStore Œì -> iProp Œ£} {s : Stm Œì œÉ} :
    stm_to_val s = None ->
    stm_to_fail s = None ->
    (forall {s' Œ≥ Œ≥' Œº Œº' Œ¥'}, ‚ü® Œ≥, Œº, Œ¥, s ‚ü© ---> ‚ü® Œ≥', Œº', Œ¥', s' ‚ü© ->
                            (Œ≥' = Œ≥) /\ (Œº' = Œº) /\ (Œ¥' = Œ¥) /\
                              (forall {s2 : Stm Œì œÉ} {Œ≥2 Œº2} {Œ¥2 : CStore Œì}, ‚ü® Œ≥2, Œº2, Œ¥2, s2 ‚ü© ---> ‚ü® Œ≥2, Œº2, Œ¥2, s' ‚ü©) /\
                            ((exists v, s' = stm_val _ v) \/ (exists msg, s' = stm_fail _ msg))) ->
    (‚àÄ v, P ={‚ä§}=‚àó Q v Œ¥) -‚àó
                 semTriple Œ¥ P s Q.
  Proof.
  Admitted.

  Lemma iris_rule_stm_pattern_match {Œì œÑ œÉ} (Œ¥Œì : CStore Œì)
    (s : Stm Œì œÉ) (pat : Pattern œÉ)
    (rhs : ‚àÄ pc : PatternCase pat, Stm (Œì ‚ñª‚ñª PatternCaseCtx pc) œÑ)
    (P : iProp Œ£) (Q : Val œÉ ‚Üí CStore Œì ‚Üí iProp Œ£) (R : Val œÑ ‚Üí CStore Œì ‚Üí iProp Œ£) :
    ‚ä¢ semTriple Œ¥Œì P s Q -‚àó
      (‚àÄ pc Œ¥pc Œ¥Œì1,
         semTriple (Œ¥Œì1 ‚ñ∫‚ñ∫ Œ¥pc) (Q (pattern_match_val_reverse pat pc Œ¥pc) Œ¥Œì1) (rhs pc)
           (Œª vœÑ (Œ¥' : CStore (Œì ‚ñª‚ñª PatternCaseCtx pc)), R vœÑ (env.drop (PatternCaseCtx pc) Œ¥'))) -‚àó
      semTriple Œ¥Œì P (stm_pattern_match s pat rhs) R.
  Proof.
  Admitted.

  Definition ValidContractSemCurried {Œî œÉ} (body : Stm Œî œÉ) (contract : SepContract Œî œÉ) : iProp Œ£ :=
    match contract with
    | MkSepContract _ _ ctxŒ£ Œ∏Œî pre result post =>
      Sep.Logic.Forall (fun (Œπ : Valuation ctxŒ£) =>
        semTriple (inst Œ∏Œî Œπ) (asn.interpret pre Œπ) body
                  (fun v Œ¥' => asn.interpret post (env.snoc Œπ (result‚à∑œÉ) v)))
    end.

  Definition ValidContractSem {Œî œÉ} (body : Stm Œî œÉ) (contract : SepContract Œî œÉ) : iProp Œ£ :=
    match contract with
    | MkSepContract _ _ ctxŒ£ Œ∏Œî pre result post =>
      ‚àÄ (Œπ : Valuation ctxŒ£),
        semTriple (inst Œ∏Œî Œπ) (asn.interpret pre Œπ) body
                  (fun v Œ¥' => asn.interpret post (env.snoc Œπ (result‚à∑œÉ) v))
    end.

  Definition ValidContractForeign {Œî œÑ} (contract : SepContract Œî œÑ) (f : ùë≠ùëø Œî œÑ) : Prop :=
    forall Œì (es : NamedEnv (Exp Œì) Œî) (Œ¥ : CStore Œì),
      match contract with
      | MkSepContract _ _ Œ£' Œ∏Œî req result ens =>
        forall (Œπ : Valuation Œ£'),
        evals es Œ¥ = inst Œ∏Œî Œπ ->
        ‚ä¢ semTriple Œ¥ (asn.interpret req Œπ) (stm_foreign f es)
          (fun v Œ¥' => asn.interpret ens (env.snoc Œπ (result‚à∑œÑ) v) ‚àó bi_pure (Œ¥' = Œ¥))
      end.

  Definition valid_contract_curry {Œî œÉ} (body : Stm Œî œÉ) (contract : SepContract Œî œÉ) :
    ValidContractSem body contract ‚ä£‚ä¢ ValidContractSemCurried body contract.
  Proof.
    destruct contract as [lvars Œ¥ req res ens]; cbn.
    now rewrite Forall_forall.
  Qed.

End Soundness.
End WithSailGS2.

End IrisSignatureRules2.
